<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 🎨 Colores -->
    <!--<Color x:Key="ColorPrincipal">#0067C3</Color>-->
    <Color x:Key="ColorPrincipal">#0067C3</Color>
    <Color x:Key="ColorSecundario1">#5FB4DD</Color>
    <Color x:Key="ColorSecundario2">#6fc4fa</Color>
    <Color x:Key="ColorFondo">#f3f6fb</Color>

    <SolidColorBrush x:Key="BrushPrincipal" Color="{StaticResource ColorPrincipal}"/>
    <SolidColorBrush x:Key="BrushSecundario1" Color="{StaticResource ColorSecundario1}"/>
    <SolidColorBrush x:Key="BrushSecundario2" Color="{StaticResource ColorSecundario2}"/>
    <SolidColorBrush x:Key="BrushFondo" Color="{StaticResource ColorFondo}"/>
    <SolidColorBrush x:Key="BrushInputBorde" Color="#ccc"/>
    <SolidColorBrush x:Key="BrushHoverBoton" Color="#031ca5"/>

    <!-- 🅰 Tipografía -->
    <FontFamily x:Key="FuentePrincipal">Open Sans</FontFamily>

    <!-- 🧾 Cajas de texto -->
    <Style x:Key="EstiloCajaTexto" TargetType="TextBox">
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BrushInputBorde}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
    </Style>

    <!-- 🔒 PasswordBox estilo -->
    <Style x:Key="EstiloPasswordBox" TargetType="PasswordBox">
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BrushInputBorde}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
    </Style>

    <!-- 🔽 ComboBox estilo corregido -->
    <Style x:Key="EstiloComboBox" TargetType="ComboBox">
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Height" Value="40" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource BrushInputBorde}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Margin" Value="0,0,0,10" />
    </Style>


    <!-- 📅 DatePicker estilo -->
    <Style x:Key="EstiloDatePicker" TargetType="DatePicker">
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource BrushInputBorde}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Margin" Value="0,0,0,10" />
        <Setter Property="Height" Value="30" />
        <Setter Property="MinWidth" Value="130" />
    </Style>

    <Style x:Key="EstiloBotonPrincipal" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource BrushPrincipal}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="12,4" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="8">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Rectangle x:Name="hoverOverlay"
                               Fill="#40FFFFFF"
                               RadiusX="8" RadiusY="8"
                               Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="hoverOverlay" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="hoverOverlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- 🔘 Botón flotante redondo -->
    <Style x:Key="EstiloBotonFlotante"
       TargetType="Button"
       BasedOn="{StaticResource EstiloBotonPrincipal}">
        <Setter Property="Width"  Value="56"/>
        <Setter Property="Height" Value="56"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="28"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 📊 DataGrid General -->
    <Style x:Key="EstiloDataGrid" TargetType="DataGrid">
        <!-- Estructura básica -->
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="SelectionMode" Value="Extended"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Vertical"/>

        <!-- Que cada columna se ajuste al ancho necesario -->
        <Setter Property="ColumnWidth" Value="Auto"/>

        <!-- Si sobrepasa el ancho, que salga scroll -->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>

        <!-- Apariencia -->
        <Setter Property="RowBackground" Value="White"/>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource BrushSecundario1}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BrushInputBorde}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}"/>
        <Setter Property="FontSize" Value="14"/>

        <!-- Espaciado -->
        <Setter Property="Margin" Value="20,10"/>

        <!-- Celdas centradas y con padding -->
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="TextBlock.TextAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="FontSize" Value="14"/>
                    <!-- Para multilineado (si lo quieres) -->
                    <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- 📋 Encabezados de columna centrados y tamaño mayor -->
    <Style x:Key="EstiloDataGridHeader" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{StaticResource BrushPrincipal}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>


    <!-- Estilo “chulo” para RadioButton -->

    <Style x:Key="FancyRadioButton" TargetType="RadioButton">
        <Setter Property="Foreground" Value="{StaticResource BrushPrincipal}"/>
        <Setter Property="FontFamily" Value="{StaticResource FuentePrincipal}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" >
                        <!-- Grid para superponer círculos -->
                        <Grid Width="20" Height="20" VerticalAlignment="Center">
                            <!-- Círculo exterior -->
                            <Ellipse x:Name="OuterCircle"
                       Stroke="{TemplateBinding Foreground}"
                       StrokeThickness="2"
                       Fill="Transparent"/>
                            <!-- Círculo interior -->
                            <Ellipse x:Name="InnerCircle"
                       Fill="{TemplateBinding Foreground}"
                       Width="12" Height="12"
                       Visibility="Collapsed"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"/>
                        </Grid>

                        <!-- Texto -->
                        <ContentPresenter Margin="8,0,0,0"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True"/>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <!-- Hover: relleno suave en el exterior -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterCircle" Property="Fill"
                      Value="{StaticResource BrushSecundario2}"/>
                        </Trigger>
                        <!-- Checked: mostramos el círculo interior -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerCircle" Property="Visibility"
                      Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>
