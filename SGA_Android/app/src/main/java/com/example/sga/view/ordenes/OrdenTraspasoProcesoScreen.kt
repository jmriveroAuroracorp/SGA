package com.example.sga.view.ordenes

import androidx.activity.compose.BackHandler
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.focusable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.material3.Switch
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.key.Key
import androidx.compose.ui.input.key.KeyEventType
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.onPreviewKeyEvent
import androidx.compose.ui.input.key.type
import androidx.compose.ui.layout.layout
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.compose.ui.draw.scale
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.runtime.collectAsState
import com.example.sga.data.dto.ordenes.*
import com.example.sga.data.dto.etiquetas.LogImpresionDto
import com.example.sga.data.dto.stock.ArticuloDto
import com.example.sga.data.dto.traspasos.*
import com.example.sga.data.model.stock.Stock
import com.example.sga.data.model.user.User
import com.example.sga.service.lector.DeviceUtils
import com.example.sga.service.scanner.QRScannerView
import com.example.sga.view.traspasos.TraspasosLogic
import com.example.sga.view.traspasos.TraspasosViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun OrdenTraspasoProcesoScreen(
    ordenId: String,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    navController: androidx.navigation.NavHostController
) {
    val user by sessionViewModel.user.collectAsState()
    val viewModel: OrdenTraspasoViewModel = viewModel()
    
    // Inicializar el ViewModel con SessionViewModel
    LaunchedEffect(Unit) {
        viewModel.init(sessionViewModel)
    }
    
    val ordenSeleccionada by viewModel.ordenSeleccionada.collectAsStateWithLifecycle()
    val cargando by viewModel.cargando.collectAsStateWithLifecycle()
    val error by viewModel.error.collectAsStateWithLifecycle()
    val mensaje by viewModel.mensaje.collectAsStateWithLifecycle()
    val stockDisponible by viewModel.stockDisponible.collectAsStateWithLifecycle()
    
    val cantidadMovida by viewModel.cantidadMovida.collectAsStateWithLifecycle()
    val ubicacionOrigenSeleccionada by viewModel.ubicacionOrigenSeleccionada.collectAsStateWithLifecycle()
    val ubicacionDestino by viewModel.ubicacionDestino.collectAsStateWithLifecycle()
    val paletDestino by viewModel.paletDestino.collectAsStateWithLifecycle()
    val paletListoParaUbicar by viewModel.paletListoParaUbicar.collectAsStateWithLifecycle()
    val paletsPendientes by viewModel.paletsPendientes.collectAsStateWithLifecycle()
    val almacenDestinoPalet by viewModel.almacenDestinoPalet.collectAsStateWithLifecycle()
    val ubicacionDestinoPalet by viewModel.ubicacionDestinoPalet.collectAsStateWithLifecycle()
    val paletSeleccionado by viewModel.paletSeleccionado.collectAsStateWithLifecycle()
    
    // Estados mejorados para manejo de errores
    val estadoUI by viewModel.estadoUI.collectAsStateWithLifecycle()
    val mostrarDialogoErrorCrearMateria by viewModel.mostrarDialogoErrorCrearMateria.collectAsStateWithLifecycle()
    val detallesErrorCrearMateria by viewModel.detallesErrorCrearMateria.collectAsStateWithLifecycle()
    val mostrarAdvertenciaCantidad by viewModel.mostrarAdvertenciaCantidad.collectAsStateWithLifecycle()
    val mensajeAdvertenciaCantidad by viewModel.mensajeAdvertenciaCantidad.collectAsStateWithLifecycle()
    
    // Estados de impresi√≥n desde ViewModel
    val mostrarDialogoImpresionVM by viewModel.mostrarDialogoImpresion.collectAsStateWithLifecycle()
    val paletParaImprimirVM by viewModel.paletParaImprimir.collectAsStateWithLifecycle()
    val articuloParaLinea by viewModel.articuloParaLinea.collectAsStateWithLifecycle()
    val ubicacionParaLinea by viewModel.ubicacionParaLinea.collectAsStateWithLifecycle()
    val lineaParaAnadir by viewModel.lineaParaAnadir.collectAsStateWithLifecycle()
    val mostrarDialogoCantidadVM by viewModel.mostrarDialogoCantidad.collectAsStateWithLifecycle()
    
    // Estados para di√°logo de ajuste de inventario
    val mostrarDialogoAjusteInventario by viewModel.mostrarDialogoAjusteInventario.collectAsStateWithLifecycle()
    val cantidadEncontrada by viewModel.cantidadEncontrada.collectAsStateWithLifecycle()
    val lineaParaAjuste by viewModel.lineaParaAjuste.collectAsStateWithLifecycle()
    
    // Estado local para di√°logo de cantidad
    var cantidadSeleccionada by remember { mutableStateOf("") }
    
    val lineaSeleccionada by viewModel.lineaSeleccionada.collectAsStateWithLifecycle()
    var mostrarEjecutar by remember { mutableStateOf(false) }
    var mostrarUbicarPalet by remember { mutableStateOf(false) }
    var mostrarPaletsPendientes by remember { mutableStateOf(false) }
    
    // Estados para cerrar palet
    var mostrarDialogoCerrarPalet by remember { mutableStateOf(false) }
    var idPaletParaCerrar by remember { mutableStateOf<String?>(null) }
    var esperandoUbicacionDestino by remember { mutableStateOf(false) }
    var traspasoPendienteId by remember { mutableStateOf<String?>(null) }
    
    // Cargar e iniciar orden al entrar en la pantalla (una sola vez)
    LaunchedEffect(ordenId, user?.id) {
        user?.let { usuario ->
            // Primero cargar lista de √≥rdenes, luego iniciar la espec√≠fica
            viewModel.cargarOrdenes(usuario)
            // Iniciar la orden espec√≠fica (esto carga las l√≠neas completas)
            viewModel.iniciarOrden(ordenId, usuario)
            // Cargar palets pendientes para mostrar el bot√≥n solo si los hay
            android.util.Log.d("UI_PALETS", "üîç Cargando palets pendientes para orden: $ordenId")
            viewModel.verificarPaletsPendientes(ordenId, usuario)
        }
    }
    
    // Mostrar mensajes (limpiar autom√°ticamente seg√∫n el tipo de mensaje)
    LaunchedEffect(mensaje) {
        mensaje?.let { msg ->
            when {
                // Mensajes de supervisi√≥n se limpian manualmente desde el ViewModel
                msg.contains("supervisi√≥n") || msg.contains("Supervisi√≥n") -> {
                    // No limpiar autom√°ticamente
                }
                // Mensajes de √©xito detallados se muestran por m√°s tiempo
                msg.contains("‚úÖ Art√≠culo a√±adido al palet exitosamente") -> {
                    delay(4000) // Mostrar por 4 segundos
                    viewModel.limpiarMensajes()
                }
                // Mensajes simples se limpian autom√°ticamente
                else -> {
                    viewModel.limpiarMensajes()
                }
            }
        }
    }
    
    // Detectar cuando hay palet listo para ubicar
    LaunchedEffect(paletListoParaUbicar) {
        paletListoParaUbicar?.let {
            mostrarUbicarPalet = true
        }
    }
    
    if (mostrarUbicarPalet && paletListoParaUbicar != null && ordenSeleccionada != null) {
        // Pantalla de ubicar palet
        val codigoGS1Palet by viewModel.codigoGS1Palet.collectAsStateWithLifecycle()
        UbicarPaletScreen(
            orden = ordenSeleccionada!!,
            paletDestino = paletListoParaUbicar!!,
            codigoGS1 = codigoGS1Palet,
            user = user!!,
            viewModel = viewModel,
            sessionViewModel = sessionViewModel,
            onNavigateBack = {
                mostrarUbicarPalet = false
                viewModel.setPaletListoParaUbicar(null)
                viewModel.setCodigoGS1Palet(null)
            }
        )
    } else if (mostrarPaletsPendientes && ordenSeleccionada != null) {
        // Pantalla de palets pendientes
        PaletsPendientesScreen(
            orden = ordenSeleccionada!!,
            paletsPendientes = paletsPendientes,
            user = user!!,
            viewModel = viewModel,
            onNavigateBack = { mostrarPaletsPendientes = false }
        )
    } else {
        // Pantalla principal de proceso
        Scaffold(
            topBar = {
                com.example.sga.view.components.AppTopBar(
                    sessionViewModel = sessionViewModel,
                    navController = navController,
                    title = "√ìrdenes de traspasos",
                    showBackButton = false,
                    customNavigationIcon = {
                        IconButton(onClick = {
                            // Si hay una l√≠nea seleccionada, volver a selecci√≥n de l√≠neas
                            if (lineaSeleccionada != null) {
                                // Solo limpiar la l√≠nea seleccionada para volver a la lista
                                viewModel.setLineaSeleccionada(null)
                            } else {
                                // Si no hay l√≠nea seleccionada, volver a √≥rdenes
                                navController.popBackStack()
                            }
                        }) {
                            Icon(
                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                                contentDescription = if (lineaSeleccionada != null) "Volver a L√≠neas" else "Volver a √ìrdenes"
                            )
                        }
                    }
                )
            }
        ) { paddingValues ->
            if (cargando) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                }
            } else {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues)
                ) {
                    // CONTENIDO PRINCIPAL CON SCROLL
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .verticalScroll(rememberScrollState())
                    ) {
                        // HEADER COMPACTO
                        ordenSeleccionada?.let { orden ->
                        val currentUser = user
                        HeaderCompacto(
                            orden = orden,
                            user = currentUser,
                            paletActivo = paletSeleccionado?.codigoPalet,
                            paletsPendientes = paletsPendientes,
                            onVerPaletsPendientes = {
                                currentUser?.let { u ->
                                    viewModel.verificarPaletsPendientes(orden.idOrdenTraspaso, u)
                                    mostrarPaletsPendientes = true
                                }
                            },
                            paletSeleccionado = paletSeleccionado,
                            onCerrarPalet = { paletId ->
                                android.util.Log.d("TOGGLE_PALET", "üîí onCerrarPalet llamado con paletId: $paletId")
                                idPaletParaCerrar = paletId
                                mostrarDialogoCerrarPalet = true
                                android.util.Log.d("TOGGLE_PALET", "üìã Di√°logo activado: mostrarDialogoCerrarPalet=$mostrarDialogoCerrarPalet")
                            },
                            onAbrirPalet = { paletId ->
                                android.util.Log.d("TOGGLE_PALET", "üîì onAbrirPalet llamado con paletId: $paletId")
                                user?.let { u ->
                                    viewModel.abrirPalet(
                                        id = paletId,
                                        usuarioId = u.id.toInt(),
                                        onSuccess = {
                                            viewModel.setMensaje("Palet abierto correctamente")
                                        },
                                        onError = { error ->
                                            viewModel.setMensaje("Error al abrir palet: $error")
                                        }
                                    )
                                }
                            },
                            viewModel = viewModel,
                            modifier = Modifier.wrapContentHeight()
                        )
                    }
                    
                    // Mensajes de estado (compactos)
                error?.let { errorMsg ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                                .padding(horizontal = 16.dp, vertical = 4.dp),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
                    ) {
                        Text(
                            text = errorMsg,
                                modifier = Modifier.padding(12.dp),
                                color = MaterialTheme.colorScheme.onErrorContainer,
                                style = MaterialTheme.typography.bodySmall
                        )
                    }
                }

                mensaje?.let { msg ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                                .padding(horizontal = 16.dp, vertical = 4.dp),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
                    ) {
                        Text(
                            text = msg,
                                modifier = Modifier.padding(12.dp),
                                color = MaterialTheme.colorScheme.onPrimaryContainer,
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }
                    
                    // CONTENIDO PRINCIPAL
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp)
                    ) {
                        ordenSeleccionada?.let { orden ->
                                            val currentUser = user
                            currentUser?.let { u ->
                                AccionPrincipal(
                                    orden = orden,
                                    user = u,
                                    lineaSeleccionada = lineaSeleccionada,
                                    stockDisponible = stockDisponible,
                                    ubicacionOrigenSeleccionada = ubicacionOrigenSeleccionada,
                                    viewModel = viewModel,
                                    sessionViewModel = sessionViewModel,
                                    onLineaSeleccionada = { linea ->
                                        // Seleccionar l√≠nea y esperar por si el backend la subdivide
                                        viewModel.seleccionarLineaConVerificacion(linea, u)
                                    }
                                )
                            }
                        }
                        }
                        
                        // Espacio para que la informaci√≥n de apoyo no tape el contenido
                        Spacer(modifier = Modifier.height(200.dp))
                    }
                    
                    // INFORMACI√ìN DE APOYO FIJA EN LA PARTE INFERIOR
                    InformacionApoyo(
                        modifier = Modifier
                            .fillMaxWidth()
                            .align(Alignment.BottomCenter),
                        lineaSeleccionada = lineaSeleccionada,
                        stockDisponible = stockDisponible,
                        paletSeleccionado = paletSeleccionado,
                        user = user,
                        viewModel = viewModel
                    )
                }
            }
        }
    }
    
    // DI√ÅLOGO DE IMPRESI√ìN OBLIGATORIA COMPLETO - EN FUNCI√ìN PRINCIPAL
    if (mostrarDialogoImpresionVM && paletParaImprimirVM != null) {
        android.util.Log.d("DIALOGO_PRINCIPAL", "‚úÖ DI√ÅLOGO ACTIVO EN FUNCI√ìN PRINCIPAL - Palet: ${paletParaImprimirVM!!.codigoPalet}")
        
        // Estados locales para el di√°logo
        var copias by remember { mutableIntStateOf(1) }
        var dropOpenImpresora by remember { mutableStateOf(false) }
        
        // Estados del ViewModel
        val impresoras by viewModel.impresoras.collectAsStateWithLifecycle()
        val impresoraSeleccionada by sessionViewModel.impresoraSeleccionada.collectAsState()
        val impresoraNombre = impresoraSeleccionada ?: ""
        
        AlertDialog(
            onDismissRequest = { }, // ¬°OBLIGATORIO! No se puede cerrar
            title = { Text("‚ö†Ô∏è Impresi√≥n obligatoria") },
            text = {
                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                    Text(
                        text = "Debe imprimir la etiqueta del palet antes de continuar:",
                        fontWeight = FontWeight.Bold
                    )
                    Text("üì¶ Palet: ${paletParaImprimirVM!!.codigoPalet}")
                    Text("üè∑Ô∏è GS1: ${paletParaImprimirVM!!.codigoGS1}")
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Text("Impresora:", style = MaterialTheme.typography.bodyMedium)
                    Box {
                        OutlinedTextField(
                            readOnly = true,
                            value = impresoraNombre,
                            onValueChange = {},
                            label = { Text("Impresora") },
                            modifier = Modifier.fillMaxWidth(),
                            trailingIcon = {
                                IconButton(onClick = { dropOpenImpresora = !dropOpenImpresora }) {
                                    Icon(Icons.Default.ArrowDropDown, contentDescription = null)
                                }
                            }
                        )
                        DropdownMenu(
                            expanded = dropOpenImpresora,
                            onDismissRequest = { dropOpenImpresora = false }
                        ) {
                            impresoras.forEach { imp ->
                                DropdownMenuItem(
                                    text = { Text(imp.nombre) },
                                    onClick = {
                                        dropOpenImpresora = false
                                        sessionViewModel.actualizarImpresora(imp.nombre)
                                        viewModel.actualizarImpresoraSeleccionadaEnBD(imp.nombre, sessionViewModel)
                                    }
                                )
                            }
                        }
                    }

                    Text("N√∫mero de copias:", style = MaterialTheme.typography.bodyMedium)
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        IconButton(onClick = { if (copias > 1) copias-- }) {
                            Icon(Icons.Default.Remove, contentDescription = "Menos")
                        }
                        Text(copias.toString(), modifier = Modifier.padding(8.dp))
                        IconButton(onClick = { copias++ }) {
                            Icon(Icons.Default.Add, contentDescription = "M√°s")
                        }
                    }
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        android.util.Log.d("DIALOGO_PRINCIPAL", "üñ®Ô∏è Bot√≥n imprimir pulsado")
                        
                        // Validar usuario
                        val usuario = sessionViewModel.user.value?.name
                        if (usuario == null) {
                            android.util.Log.e("IMPRESION_PALET", "‚ùå Usuario es null - ABORTANDO")
                            viewModel.setError("‚ùå Error: Usuario no identificado. Por favor, inicie sesi√≥n nuevamente.")
                            viewModel.cerrarDialogoImpresion()
                            return@TextButton
                        }
                        android.util.Log.d("IMPRESION_PALET", "‚úÖ Usuario validado: $usuario")
                        
                        // Validar dispositivo
                        val dispositivo = sessionViewModel.dispositivo.value?.id
                        if (dispositivo == null) {
                            android.util.Log.e("IMPRESION_PALET", "‚ùå Dispositivo es null - ABORTANDO")
                            viewModel.setError("‚ùå Error: Dispositivo no identificado. Por favor, configure el dispositivo.")
                            viewModel.cerrarDialogoImpresion()
                            return@TextButton
                        }
                        android.util.Log.d("IMPRESION_PALET", "‚úÖ Dispositivo validado: $dispositivo")
                        
                        // Validar impresora
                        android.util.Log.d("IMPRESION_PALET", "üîç Buscando impresora con nombre: '$impresoraNombre'")
                        android.util.Log.d("IMPRESION_PALET", "üìã Impresoras disponibles: ${impresoras.map { it.nombre }}")
                        val impresora = impresoras.find { it.nombre == impresoraNombre }
                        if (impresora == null) {
                            android.util.Log.e("IMPRESION_PALET", "‚ùå Impresora '$impresoraNombre' NO ENCONTRADA - ABORTANDO")
                            viewModel.setError("‚ùå Error: Impresora '$impresoraNombre' no encontrada. Por favor, seleccione una impresora v√°lida.")
                            viewModel.cerrarDialogoImpresion()
                            return@TextButton
                        }
                        android.util.Log.d("IMPRESION_PALET", "‚úÖ Impresora encontrada: ${impresora.nombre} (ID: ${impresora.id})")

                        val dto = LogImpresionDto(
                            usuario = usuario,
                            dispositivo = dispositivo,
                            idImpresora = impresora.id,
                            etiquetaImpresa = 0,
                            tipoEtiqueta = 2,
                            copias = copias,
                            pathEtiqueta = "\\\\Sage200\\mrh\\Servicios\\PrintCenter\\ETIQUETAS\\PALET.nlbl",
                            codigoGS1 = paletParaImprimirVM!!.codigoGS1,
                            codigoPalet = paletParaImprimirVM!!.codigoPalet
                        )
                        
                        // Log del DTO de impresi√≥n
                        android.util.Log.d("IMPRESION_PALET", "üñ®Ô∏è DTO de impresi√≥n enviado:")
                        android.util.Log.d("IMPRESION_PALET", "  üìù Usuario: $usuario")
                        android.util.Log.d("IMPRESION_PALET", "  üì± Dispositivo: $dispositivo")
                        android.util.Log.d("IMPRESION_PALET", "  üñ®Ô∏è ID Impresora: ${impresora.id}")
                        android.util.Log.d("IMPRESION_PALET", "  üìä Etiqueta Impresa: 0")
                        android.util.Log.d("IMPRESION_PALET", "  üè∑Ô∏è Tipo Etiqueta: 2")
                        android.util.Log.d("IMPRESION_PALET", "  üìÑ Copias: $copias")
                        android.util.Log.d("IMPRESION_PALET", "  üìÅ Path Etiqueta: \\\\Sage200\\mrh\\Servicios\\PrintCenter\\ETIQUETAS\\PALET.nlbl")
                        android.util.Log.d("IMPRESION_PALET", "  üè∑Ô∏è C√≥digo GS1: ${paletParaImprimirVM!!.codigoGS1}")
                        android.util.Log.d("IMPRESION_PALET", "  üì¶ C√≥digo Palet: ${paletParaImprimirVM!!.codigoPalet}")
                        
                        viewModel.imprimirEtiquetaPalet(dto)
                        
                        // PASO 3: Cerrar di√°logo de impresi√≥n y activar di√°logo de cantidad
                        viewModel.cerrarDialogoImpresion()
                        
                        // Activar di√°logo de selecci√≥n de cantidad
                        if (lineaParaAnadir != null) {
                            // Usar la cantidad menor entre stock disponible y cantidad planificada
                            val cantidadDisponible = if (stockDisponible.isNotEmpty()) {
                                stockDisponible.first().cantidadDisponible
                            } else {
                                lineaParaAnadir!!.cantidadPlan
                            }
                            val cantidadPlanificada = lineaParaAnadir!!.cantidadPlan
                            val cantidadInicial = minOf(cantidadDisponible, cantidadPlanificada)
                            cantidadSeleccionada = cantidadInicial.toString()
                        }
                    },
                    enabled = impresoraNombre.isNotBlank()
                ) { 
                    Text("üñ®Ô∏è Imprimir") 
                }
            }
            // NO hay dismissButton - Es obligatorio imprimir
        )
    }
    
    // DI√ÅLOGO DE SELECCI√ìN DE CANTIDAD (replicado de TraspasosScreen.kt)
    if (mostrarDialogoCantidadVM && paletParaImprimirVM != null && articuloParaLinea != null && lineaParaAnadir != null) {
        // Inicializar cantidad cuando se active el di√°logo
        LaunchedEffect(mostrarDialogoCantidadVM) {
            if (mostrarDialogoCantidadVM && lineaParaAnadir != null) {
                // Usar la cantidad menor entre stock disponible y cantidad planificada
                val cantidadDisponible = if (stockDisponible.isNotEmpty()) {
                    stockDisponible.first().cantidadDisponible
                } else {
                    lineaParaAnadir!!.cantidadPlan
                }
                val cantidadPlanificada = lineaParaAnadir!!.cantidadPlan
                val cantidadInicial = minOf(cantidadDisponible, cantidadPlanificada)
                
                cantidadSeleccionada = cantidadInicial.toString()
                android.util.Log.d("DIALOGO_CANTIDAD", "üìä Inicializando cantidad: $cantidadInicial (disponible: $cantidadDisponible, planificada: $cantidadPlanificada)")
            }
        }
        
        AlertDialog(
            onDismissRequest = { /* bloqueamos para forzar acci√≥n */ },
            title = { Text("Cantidad a a√±adir al palet") },
            text = {
                Column {
                    Text("üì¶ Art√≠culo: ${articuloParaLinea!!.codigoArticulo}")
                    articuloParaLinea!!.descripcion?.let { desc ->
                        Text("üìù $desc", style = MaterialTheme.typography.bodySmall)
                    }
                    Text("üìä Cantidad planificada: ${lineaParaAnadir!!.cantidadPlan}")
                    Text("üì¶ Stock disponible: ${stockDisponible.firstOrNull()?.cantidadDisponible ?: 0.0}")
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    OutlinedTextField(
                        value = cantidadSeleccionada,
                        onValueChange = {
                            val limpio = it.filter { c -> c.isDigit() || c == '.' }
                            cantidadSeleccionada = limpio
                        },
                        label = { Text("Cantidad Cogida") },
                        singleLine = true,
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal)
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Bot√≥n para ajustar inventario (solo visible si la l√≠nea est√° EN_PROCESO)
                    lineaParaAnadir?.let { linea ->
                        if (viewModel.puedeAjustarInventario(linea)) {
                            Button(
                                onClick = {
                                    android.util.Log.d("DIALOGO_CANTIDAD", "üîß Activando ajuste de inventario para l√≠nea: ${linea.idLineaOrdenTraspaso}")
                                    viewModel.activarDialogoAjusteInventario(linea)
                                },
                                modifier = Modifier.fillMaxWidth(),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = MaterialTheme.colorScheme.secondary
                                )
                            ) {
                                Text("üîß Ajustar Inventario")
                            }
                        }
                    }
                }
            },
            confirmButton = {
                TextButton(onClick = {
                    android.util.Log.d("DIALOGO_CANTIDAD", "üîò Click en A√±adir al palet")
                    
                    val qty = cantidadSeleccionada.toDoubleOrNull() ?: 0.0
                    val stockMax = stockDisponible.firstOrNull()?.cantidadDisponible ?: 0.0
                    
                    android.util.Log.d("DIALOGO_CANTIDAD", "üìä Cantidad: $qty, Stock m√°ximo: $stockMax")
                    
                    // Validaci√≥n con mensaje de error
                    if (qty <= 0.0) {
                        android.util.Log.d("DIALOGO_CANTIDAD", "‚ùå Cantidad inv√°lida: $qty")
                        viewModel.setError("‚ùå La cantidad debe ser mayor que 0")
                        return@TextButton
                    }
                    
                    if (qty > stockMax) {
                        android.util.Log.d("DIALOGO_CANTIDAD", "‚ùå Cantidad excede stock: $qty > $stockMax")
                        viewModel.setError("‚ùå No puedes reservar m√°s de lo disponible: $stockMax unidades")
                        return@TextButton
                    }

                    // Verificar datos requeridos
                    val empresaCodigo = sessionViewModel.empresaSeleccionada.value?.codigo?.toShort()
                    val usuarioIdInt = user?.id?.toIntOrNull()
                    
                    android.util.Log.d("DIALOGO_CANTIDAD", "üè¢ Empresa: $empresaCodigo, Usuario: $usuarioIdInt")
                    android.util.Log.d("DIALOGO_CANTIDAD", "üì¶ Palet: ${paletParaImprimirVM?.id}, Art√≠culo: ${articuloParaLinea?.codigoArticulo}")
                    
                    if (empresaCodigo == null) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Empresa no seleccionada")
                        viewModel.setError("‚ùå Error: Empresa no seleccionada")
                        return@TextButton
                    }
                    
                    if (usuarioIdInt == null) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Usuario ID inv√°lido")
                        viewModel.setError("‚ùå Error: Usuario no v√°lido")
                        return@TextButton
                    }
                    
                    if (paletParaImprimirVM == null) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Palet no disponible")
                        viewModel.setError("‚ùå Error: Palet no disponible")
                        return@TextButton
                    }
                    
                    if (articuloParaLinea == null) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Art√≠culo no disponible")
                        viewModel.setError("‚ùå Error: Art√≠culo no disponible")
                        return@TextButton
                    }
                    
                    if (ubicacionParaLinea == null) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Ubicaci√≥n no disponible")
                        viewModel.setError("‚ùå Error: Ubicaci√≥n no disponible")
                        return@TextButton
                    }
                    
                    // A√±adir l√≠nea con cantidad seleccionada
                    val lineaDto = LineaPaletCrearDto(
                        codigoEmpresa = empresaCodigo,
                        usuarioId = usuarioIdInt,
                        codigoArticulo = articuloParaLinea!!.codigoArticulo,
                        descripcion = articuloParaLinea!!.descripcion,
                        lote = articuloParaLinea!!.partida,
                        fechaCaducidad = articuloParaLinea!!.fechaCaducidad,
                        cantidad = qty,
                        codigoAlmacen = ubicacionParaLinea!!.first,
                        ubicacion = ubicacionParaLinea!!.second
                    )
                    
                    val paletCodigo = paletParaImprimirVM!!.codigoPalet
                    val paletId = paletParaImprimirVM!!.id
                    
                    android.util.Log.d("DIALOGO_CANTIDAD", "üöÄ Llamando anadirLinea con palet: $paletId")
                    
                    viewModel.anadirLinea(
                        idPalet = paletId,
                        dto = lineaDto
                    ) {
                        // L√≠nea a√±adida exitosamente
                        android.util.Log.d("DIALOGO_CANTIDAD", "‚úÖ L√≠nea a√±adida exitosamente")
                        
                        // Mostrar mensaje de √©xito m√°s detallado
                        val mensajeExito = """
                            ‚úÖ Art√≠culo a√±adido al palet exitosamente
                            
                            üì¶ Palet: $paletCodigo
                            üè∑Ô∏è Art√≠culo: ${articuloParaLinea?.codigoArticulo}
                            üìä Cantidad: $qty unidades
                            
                            Continuando con la siguiente tarea...
                        """.trimIndent()
                        viewModel.setMensaje(mensajeExito)
                        
                        // Limpiar estados y cerrar di√°logo
                        cantidadSeleccionada = ""
                        android.util.Log.d("DIALOGO_CANTIDAD", "üîí Llamando cerrarDialogoCantidad()")
                        viewModel.cerrarDialogoCantidad()
                        android.util.Log.d("DIALOGO_CANTIDAD", "‚úÖ cerrarDialogoCantidad() llamado")
                    }
                }) {
                    Text("A√±adir al palet")
                }
            },
            dismissButton = {
                TextButton(onClick = {
                    android.util.Log.d("DIALOGO_CANTIDAD", "üîò Click en Cancelar")
                    try {
                        cantidadSeleccionada = ""
                        android.util.Log.d("DIALOGO_CANTIDAD", "üßπ Cantidad limpiada")
                        viewModel.cerrarDialogoCantidad()
                        android.util.Log.d("DIALOGO_CANTIDAD", "‚úÖ Di√°logo cerrado exitosamente")
                    } catch (e: Exception) {
                        android.util.Log.e("DIALOGO_CANTIDAD", "‚ùå Error al cancelar: ${e.message}", e)
                        viewModel.setError("Error al cancelar: ${e.message}")
                    }
                }) {
                    Text("Cancelar")
                }
            }
        )
    }
    
    // DI√ÅLOGO DE AJUSTE DE INVENTARIO
    if (mostrarDialogoAjusteInventario && lineaParaAjuste != null) {
        AlertDialog(
            onDismissRequest = { /* bloqueamos para forzar acci√≥n */ },
            title = { Text("üîß Ajustar Inventario") },
            text = {
                Column {
                    Text("üì¶ Art√≠culo: ${lineaParaAjuste!!.codigoArticulo}")
                    lineaParaAjuste!!.descripcionArticulo?.let { desc ->
                        Text("üìù $desc", style = MaterialTheme.typography.bodySmall)
                    }
                    Text("üìä Cantidad planificada: ${lineaParaAjuste!!.cantidadPlan}")
                    Text("üì¶ Stock disponible: ${stockDisponible.firstOrNull()?.cantidadDisponible ?: 0.0}")
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    OutlinedTextField(
                        value = cantidadEncontrada,
                        onValueChange = {
                            val limpio = it.filter { c -> c.isDigit() || c == '.' }
                            viewModel.setCantidadEncontrada(limpio)
                        },
                        label = { Text("Cantidad Encontrada") },
                        singleLine = true,
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal)
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Text(
                        "‚ö†Ô∏è Introduce la cantidad real que has encontrado f√≠sicamente en la ubicaci√≥n.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        android.util.Log.d("DIALOGO_AJUSTE", "üîò Click en Confirmar ajuste")
                        
                        val cantidad = cantidadEncontrada.toDoubleOrNull() ?: 0.0
                        
                        if (cantidad < 0) {
                            viewModel.setError("‚ùå La cantidad encontrada debe ser mayor o igual a 0")
                            return@TextButton
                        }
                        
                        viewModel.confirmarAjusteInventario(
                            onSuccess = {
                                android.util.Log.d("DIALOGO_AJUSTE", "‚úÖ Ajuste confirmado exitosamente")
                                // Cerrar el di√°logo despu√©s del √©xito
                                viewModel.cerrarDialogoAjusteInventario()
                            },
                            onError = { error ->
                                android.util.Log.e("DIALOGO_AJUSTE", "‚ùå Error en ajuste: $error")
                                // Cerrar el di√°logo tambi√©n en caso de error para que el usuario pueda reintentar
                                viewModel.cerrarDialogoAjusteInventario()
                            }
                        )
                    },
                    enabled = cantidadEncontrada.isNotBlank()
                ) {
                    Text("Confirmar ajuste")
                }
            },
            dismissButton = {
                TextButton(onClick = {
                    android.util.Log.d("DIALOGO_AJUSTE", "üîò Click en Cancelar")
                    viewModel.cerrarDialogoAjusteInventario()
                }) {
                    Text("Cancelar")
                }
            }
        )
    }
    
    // DI√ÅLOGO DE ERROR CREAR MATERIA - Manejo espec√≠fico para errores de stock
    DialogoErrorCrearMateria(
        mostrar = mostrarDialogoErrorCrearMateria,
        detalles = detallesErrorCrearMateria,
        onDismiss = {
            viewModel.cerrarDialogoErrorCrearMateria()
        }
    )
    
    // DI√ÅLOGO DE ADVERTENCIA DE CANTIDAD - Validaci√≥n previa opcional
    DialogoAdvertenciaCantidad(
        mostrar = mostrarAdvertenciaCantidad,
        mensaje = mensajeAdvertenciaCantidad,
        onConfirmar = {
            // Obtener datos necesarios para continuar
            val lineaActual = lineaSeleccionada
            val cantidad = cantidadMovida.toDoubleOrNull()
            if (lineaActual != null && cantidad != null) {
                viewModel.confirmarAdvertenciaCantidad(
                    idLinea = lineaActual.idLineaOrdenTraspaso,
                    cantidadMovida = cantidad,
                    paletDestino = paletDestino.ifEmpty { null }
                )
            }
        },
        onCancelar = {
            viewModel.cerrarDialogoAdvertenciaCantidad()
        }
    )
    
    // DI√ÅLOGO DE CONFIRMACI√ìN PARA CERRAR PALET
    if (mostrarDialogoCerrarPalet && idPaletParaCerrar != null) {
        AlertDialog(
            onDismissRequest = { mostrarDialogoCerrarPalet = false },
            title = { Text("Cerrar palet") },
            text = {
                Column {
                    Text(
                        text = "¬øEst√° seguro de que desea cerrar el palet?",
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("Palet: ${paletSeleccionado?.codigoPalet}")
                    Text("Esta acci√≥n crear√° un traspaso en estado PENDIENTE")
                    Text("Deber√° escanear la ubicaci√≥n destino para completarlo")
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        mostrarDialogoCerrarPalet = false
                        
                        user?.let { u ->
                            val empresa = sessionViewModel.empresaSeleccionada.value?.codigo?.toShort()
                            if (empresa != null) {
                                viewModel.cerrarPalet(
                                    id = idPaletParaCerrar!!,
                                    usuarioId = u.id.toInt(),
                                    codigoAlmacen = ubicacionOrigenSeleccionada?.codigoAlmacen,
                                    codigoEmpresa = empresa,
                                    onSuccess = { traspasoId ->
                                        // Palet cerrado exitosamente - activar bloqueo
                                        android.util.Log.d("CERRAR_PALET", "‚úÖ Palet cerrado exitosamente")
                                        android.util.Log.d("CERRAR_PALET", "üìù Traspaso ID recibido: '$traspasoId'")
                                        android.util.Log.d("CERRAR_PALET", "   Tipo: ${traspasoId?.javaClass?.simpleName}")
                                        android.util.Log.d("CERRAR_PALET", "   Longitud: ${traspasoId?.length}")
                                        android.util.Log.d("CERRAR_PALET", "   ¬øEs vac√≠o?: ${traspasoId?.isEmpty()}")
                                        
                                        esperandoUbicacionDestino = true
                                        traspasoPendienteId = traspasoId
                                        idPaletParaCerrar = null
                                        viewModel.setMensaje("Palet cerrado. Traspaso creado: $traspasoId")
                                        viewModel.setMensaje("Escanee la ubicaci√≥n destino para completar el traspaso")
                                    },
                                    onError = { error ->
                                        viewModel.setError("Error al cerrar palet: $error")
                                    }
                                )
                            } else {
                                viewModel.setError("Error: Empresa no seleccionada")
                            }
                        }
                    }
                ) { 
                    Text("S√≠, cerrar palet") 
                }
            },
            dismissButton = {
                TextButton(onClick = { 
                    mostrarDialogoCerrarPalet = false
                    idPaletParaCerrar = null
                }) { 
                    Text("Cancelar") 
                }
            }
        )
    }
    
    // MANEJO DE UBICACI√ìN DESTINO DESPU√âS DE CERRAR PALET
    if (esperandoUbicacionDestino) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .zIndex(2f),
            contentAlignment = Alignment.Center
        ) {
            Column(
                modifier = Modifier
                    .padding(24.dp)
                    .background(Color.White, RoundedCornerShape(12.dp))
                    .padding(16.dp)
                    .zIndex(3f)
            ) {
                Text("Ubicaci√≥n destino requerida", style = MaterialTheme.typography.titleLarge)
                Spacer(modifier = Modifier.height(8.dp))
                Text("Escanee una ubicaci√≥n para finalizar el traspaso.")
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
        
        // Escaneo de ubicaci√≥n destino (PDA)
        if (DeviceUtils.hasHardwareScanner(LocalContext.current)) {
            val focusRequester = remember { FocusRequester() }
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .focusRequester(focusRequester)
                    .focusable()
                    .onPreviewKeyEvent { event ->
                        if (event.nativeKeyEvent?.action == android.view.KeyEvent.ACTION_MULTIPLE) {
                            event.nativeKeyEvent.characters?.let { code ->
                                android.util.Log.d("UBICAR_PALET", "üìç Ubicaci√≥n escaneada (PDA): $code")
                                
                                // Parsear ubicaci√≥n (formato: ALMACEN$UBICACION)
                                val (almacen, ubicacion) = if (code.contains('$')) {
                                    val parts = code.split('$')
                                    if (parts.size == 2) parts[0] to parts[1] else {
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                                        return@onPreviewKeyEvent false
                                    }
                                } else {
                                    android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                                    return@onPreviewKeyEvent false
                                }
                                
                                // COMPLETAR TRASPASO
                                android.util.Log.d("COMPLETAR_TRASPASO", "üöÄ Intentando completar traspaso")
                                android.util.Log.d("COMPLETAR_TRASPASO", "üìù Traspaso ID a usar: '$traspasoPendienteId'")
                                android.util.Log.d("COMPLETAR_TRASPASO", "   Tipo: ${traspasoPendienteId?.javaClass?.simpleName}")
                                android.util.Log.d("COMPLETAR_TRASPASO", "   Longitud: ${traspasoPendienteId?.length}")
                                android.util.Log.d("COMPLETAR_TRASPASO", "üì¶ Palet seleccionado ID: ${paletSeleccionado?.id}")
                                android.util.Log.d("COMPLETAR_TRASPASO", "üìç Almac√©n destino: $almacen")
                                android.util.Log.d("COMPLETAR_TRASPASO", "üìç Ubicaci√≥n destino: $ubicacion")
                                
                                val traspasosLogic = com.example.sga.view.traspasos.TraspasosLogic()
                                val completarDto = com.example.sga.data.dto.traspasos.CompletarTraspasoDto(
                                    codigoAlmacenDestino = almacen,
                                    ubicacionDestino = ubicacion,
                                    fechaFinalizacion = java.time.LocalDateTime.now().toString(),
                                    usuarioFinalizacionId = user?.id?.toInt() ?: 0
                                )
                                
                                android.util.Log.d("COMPLETAR_TRASPASO", "üì§ Llamando a completarTraspaso con ID: '$traspasoPendienteId'")
                                
                                traspasosLogic.completarTraspaso(
                                    idTraspaso = traspasoPendienteId!!,
                                    dto = completarDto,
                                    paletId = paletSeleccionado?.id,
                                    onSuccess = {
                                        android.util.Log.d("UBICAR_PALET", "‚úÖ Traspaso completado correctamente")
                                        
                                        // PASO 3: Actualizar l√≠nea de orden con el ID del traspaso
                                        val idLinea = lineaSeleccionada?.idLineaOrdenTraspaso
                                        if (idLinea != null) {
                                            viewModel.actualizarLineaConIdTraspaso(
                                                idLinea = idLinea,
                                                idTraspaso = traspasoPendienteId!!,
                                                onSuccess = {
                                                    android.util.Log.d("UBICAR_PALET", "‚úÖ L√≠nea de orden actualizada con IdTraspaso")
                                                    esperandoUbicacionDestino = false
                                                    traspasoPendienteId = null
                                                    viewModel.limpiarMensajes()
                                                    viewModel.setMensaje("Traspaso completado correctamente")
                                                },
                                                onError = { error ->
                                                    android.util.Log.e("UBICAR_PALET", "‚ùå Error al actualizar l√≠nea de orden: $error")
                                                    viewModel.setError("Traspaso completado pero error al actualizar l√≠nea: $error")
                                                }
                                            )
                                        } else {
                                            android.util.Log.w("UBICAR_PALET", "‚ö†Ô∏è No hay l√≠nea seleccionada para actualizar")
                                            esperandoUbicacionDestino = false
                                            traspasoPendienteId = null
                                        }
                                    },
                                    onError = { error ->
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Error al completar traspaso: $error")
                                        viewModel.setError("Error al completar traspaso: $error")
                                    }
                                )
                                return@onPreviewKeyEvent true
                            }
                            return@onPreviewKeyEvent false
                        }
                        return@onPreviewKeyEvent false
                    }
            )
            
            LaunchedEffect(esperandoUbicacionDestino) {
                if (esperandoUbicacionDestino) {
                    delay(200)
                    focusRequester.requestFocus()
                }
            }
        }
        
        // Escaneo de ubicaci√≥n destino (C√°mara)
        if (!DeviceUtils.hasHardwareScanner(LocalContext.current)) {
            QRScannerView(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(250.dp),
                onCodeScanned = { code ->
                    android.util.Log.d("UBICAR_PALET", "üìç Ubicaci√≥n escaneada (C√°mara): $code")
                    
                    // Parsear ubicaci√≥n (formato: ALMACEN$UBICACION)
                    val (almacen, ubicacion) = if (code.contains('$')) {
                        val parts = code.split('$')
                        if (parts.size == 2) parts[0] to parts[1] else {
                            android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                            return@QRScannerView
                        }
                    } else {
                        android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                        return@QRScannerView
                    }
                    
                    // COMPLETAR TRASPASO
                    val traspasosLogic = com.example.sga.view.traspasos.TraspasosLogic()
                    val completarDto = com.example.sga.data.dto.traspasos.CompletarTraspasoDto(
                        codigoAlmacenDestino = almacen,
                        ubicacionDestino = ubicacion,
                        fechaFinalizacion = java.time.LocalDateTime.now().toString(),
                        usuarioFinalizacionId = user?.id?.toInt() ?: 0
                    )
                    
                    traspasosLogic.completarTraspaso(
                        idTraspaso = traspasoPendienteId!!,
                        dto = completarDto,
                        paletId = paletSeleccionado?.id,
                        onSuccess = {
                            android.util.Log.d("UBICAR_PALET", "‚úÖ Traspaso completado correctamente")
                            
                            // PASO 3: Actualizar l√≠nea de orden con el ID del traspaso
                            val idLinea = lineaSeleccionada?.idLineaOrdenTraspaso
                            if (idLinea != null) {
                                viewModel.actualizarLineaConIdTraspaso(
                                    idLinea = idLinea,
                                    idTraspaso = traspasoPendienteId!!,
                                    onSuccess = {
                                        android.util.Log.d("UBICAR_PALET", "‚úÖ L√≠nea de orden actualizada con IdTraspaso")
                                        esperandoUbicacionDestino = false
                                        traspasoPendienteId = null
                                        viewModel.limpiarMensajes()
                                        viewModel.setMensaje("Traspaso completado correctamente")
                                    },
                                    onError = { error ->
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Error al actualizar l√≠nea de orden: $error")
                                        viewModel.setError("Traspaso completado pero error al actualizar l√≠nea: $error")
                                    }
                                )
                            } else {
                                android.util.Log.w("UBICAR_PALET", "‚ö†Ô∏è No hay l√≠nea seleccionada para actualizar")
                                esperandoUbicacionDestino = false
                                traspasoPendienteId = null
                            }
                        },
                        onError = { error ->
                            android.util.Log.e("UBICAR_PALET", "‚ùå Error al completar traspaso: $error")
                            viewModel.setError("Error al completar traspaso: $error")
                        }
                    )
                }
            )
        }
    }
    
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun OrdenInfoCard(
    orden: OrdenTraspasoDto
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // Header con c√≥digo y estado
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = orden.codigoOrden ?: "Sin c√≥digo",
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                }
                EstadoOrdenChip(estado = orden.estado)
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Informaci√≥n de la orden
            orden.fechaPlan?.let { fechaPlan ->
                InfoRowOrden(
                    icon = Icons.Default.Schedule,
                    label = "Fecha Plan",
                    value = formatearSoloFecha(fechaPlan)
                )
            }
        }
    }
}

@Composable
fun LineaOrdenCard(
    linea: LineaOrdenTraspasoDetalleDto,
    onClick: () -> Unit
) {
    val estadoColor = when (linea.estado) {
        "PENDIENTE" -> MaterialTheme.colorScheme.secondary
        "EN_PROGRESO" -> MaterialTheme.colorScheme.tertiary
        "SUBDIVIDIDO" -> MaterialTheme.colorScheme.tertiary
        "COMPLETADA" -> MaterialTheme.colorScheme.primary
        "BLOQUEADA" -> MaterialTheme.colorScheme.error
        else -> MaterialTheme.colorScheme.outline
    }
    
    val estadoTexto = when (linea.estado) {
        "PENDIENTE" -> "Pendiente"
        "EN_PROCESO" -> "En Proceso"
        "SUBDIVIDIDO" -> "Subdividido"
        "COMPLETADA" -> "Completada"
        "BLOQUEADA" -> "Bloqueada"
        else -> linea.estado
    }
    
    Card(
        onClick = if (linea.estado == "SUBDIVIDIDO" || linea.estado == "BLOQUEADA") { {} } else onClick,
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = when (linea.estado) {
                "PENDIENTE", "EN_PROCESO" -> MaterialTheme.colorScheme.primaryContainer
                "SUBDIVIDIDO" -> MaterialTheme.colorScheme.surfaceVariant
                "BLOQUEADA" -> MaterialTheme.colorScheme.errorContainer
                else -> MaterialTheme.colorScheme.surface
            }
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "Art√≠culo: ${linea.codigoArticulo}",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Surface(
                    color = estadoColor,
                    shape = MaterialTheme.shapes.small
                ) {
                    Text(
                        text = estadoTexto,
                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.onPrimary
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            
            linea.descripcionArticulo?.let { descripcion ->
                Text(
                    text = descripcion,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            
            Spacer(modifier = Modifier.height(4.dp))
            
            Text(
                text = "Cantidad Necesaria: ${linea.cantidadPlan}",
                style = MaterialTheme.typography.bodyMedium
            )
            
            if (linea.cantidadMovida > 0) {
                Text(
                    text = "Cantidad movida: ${linea.cantidadMovida}",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
                       
            
            linea.fechaFinalizacion?.let { fechaFinalizacion ->
                Text(
                    text = "Finalizado: ${formatearFecha(fechaFinalizacion)}",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
fun StockDisponibleCard(
    stock: StockDisponibleDto,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Card(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (isSelected) 
                MaterialTheme.colorScheme.primaryContainer 
            else 
                MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier.padding(12.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "${stock.codigoAlmacen} - ${stock.ubicacion ?: "Sin ubicaci√≥n"}",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Medium
                )
                
                Text(
                    text = "Stock: ${stock.cantidadDisponible}",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Bold
                )
            }
            
            stock.partida?.let { partida ->
                Text(
                    text = "Partida: $partida",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            
            stock.fechaCaducidad?.let { fechaCaducidad ->
                Text(
                    text = "Caducidad: ${formatearFecha(fechaCaducidad)}",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
fun InfoRow(
    label: String,
    value: String
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Medium
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

@Composable
fun UbicarPaletScreen(
    orden: OrdenTraspasoDto,
    paletDestino: String,
    codigoGS1: String?,
    user: User,
    viewModel: OrdenTraspasoViewModel,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    onNavigateBack: () -> Unit
) {
    val cargando by viewModel.cargando.collectAsStateWithLifecycle()
    val error by viewModel.error.collectAsStateWithLifecycle()
    val almacenDestinoPalet by viewModel.almacenDestinoPalet.collectAsStateWithLifecycle()
    val ubicacionDestinoPalet by viewModel.ubicacionDestinoPalet.collectAsStateWithLifecycle()
    
    // Obtener usuario y empresa como en el resto del componente
    val usuarioId = user.id.toIntOrNull() ?: return
    val empresa = sessionViewModel.empresaSeleccionada.collectAsState().value?.codigo?.toShort() ?: return
    
    // Estados para el escaneo
    var paletEscaneado by remember { mutableStateOf(false) }
    var ubicacionEscaneada by remember { mutableStateOf<Pair<String, String>?>(null) }
    var escaneoProcesado by remember { mutableStateOf(false) }
    
    // Estados para el flujo de ubicaci√≥n
    var esperandoUbicacionDestino by remember { mutableStateOf(false) }
    var traspasoPendienteId by remember { mutableStateOf<String?>(null) }
    var paletIdInterno by remember { mutableStateOf<String?>(null) }
    
    val context = LocalContext.current
    val focusRequester = remember { FocusRequester() }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Header
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onNavigateBack) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                    contentDescription = "Volver"
                )
            }
            
            Text(
                text = "Ubicar Palet",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            // Espacio vac√≠o para centrar el t√≠tulo
            Spacer(modifier = Modifier.width(48.dp))
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        
        // Informaci√≥n del palet
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "Palet listo para ubicar",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text("Palet: $paletDestino")
                Text("Orden: ${orden.codigoOrden ?: "Sin c√≥digo"}")
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Flujo de escaneo
        if (!paletEscaneado) {
            // Paso 1: Escanear palet
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = if (DeviceUtils.hasHardwareScanner(context)) "üì± Escanee el palet" else "üì± Escanee el palet",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Scanner de palet - PDA (hardware scanner)
            if (DeviceUtils.hasHardwareScanner(context)) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(100.dp)
                        .focusRequester(focusRequester)
                        .focusable()
                        .onPreviewKeyEvent { event ->
                            if (event.nativeKeyEvent?.action == android.view.KeyEvent.ACTION_MULTIPLE) {
                                if (escaneoProcesado) return@onPreviewKeyEvent true
                                escaneoProcesado = true
                                
                                event.nativeKeyEvent.characters?.let { code ->
                                    android.util.Log.d("UBICAR_PALET", "üì± C√≥digo GS1 escaneado (PDA): $code")
                                    
                                    // Validar que el c√≥digo GS1 coincida con el palet
                                    val codigoLimpio = code.trim().removePrefix("00") // Quitar ceros extra del principio
                                    if (codigoLimpio == codigoGS1) {
                                        android.util.Log.d("UBICAR_PALET", "‚úÖ Palet validado correctamente")
                                        
                                        // OBTENER ID INTERNO DEL PALET POR GS1
                                        val traspasosLogic = TraspasosLogic()
                                        traspasosLogic.obtenerPaletPorGS1(
                                            gs1 = codigoLimpio,
                                            onSuccess = { palet ->
                                                android.util.Log.d("UBICAR_PALET", "‚úÖ Palet obtenido: ${palet.id}")
                                                paletIdInterno = palet.id // Guardar ID interno
                                                
                                                // CERRAR PALET (genera traspaso "PENDIENTE")
                                                viewModel.cerrarPalet(
                                                    id = palet.id, // Usar ID interno, no c√≥digo
                                                    usuarioId = usuarioId,
                                                    codigoAlmacen = almacenDestinoPalet,
                                                    codigoEmpresa = empresa,
                                                    onSuccess = { paletId ->
                                                        android.util.Log.d("UBICAR_PALET", "‚úÖ Palet cerrado correctamente. Palet ID: $paletId")
                                                        // Buscar traspasos pendientes generados por este palet
                                                        traspasosLogic.comprobarTraspasoPendiente(
                                                            usuarioId = usuarioId,
                                                            onSuccess = { traspasos ->
                                                                val traspasosDelPalet = traspasos.filter { it.paletId == paletId }
                                                                if (traspasosDelPalet.isNotEmpty()) {
                                                                    traspasoPendienteId = traspasosDelPalet.first().id
                                                                    android.util.Log.d("UBICAR_PALET", "üîç Traspasos del palet encontrados: ${traspasosDelPalet.size}, usando ID: $traspasoPendienteId")
                                                                    paletEscaneado = true
                                                                    esperandoUbicacionDestino = true
                                                                    viewModel.limpiarMensajes()
                                                                } else {
                                                                    android.util.Log.e("UBICAR_PALET", "‚ùå No se encontraron traspasos para el palet: $paletId")
                                                                    viewModel.setError("No se encontraron traspasos pendientes para el palet")
                                                                }
                                                            },
                                                            onError = { error ->
                                                                android.util.Log.e("UBICAR_PALET", "‚ùå Error al obtener traspasos pendientes: $error")
                                                                viewModel.setError("Error al obtener traspasos pendientes: $error")
                                                            }
                                                        )
                                                    },
                                                    onError = { error ->
                                                        android.util.Log.e("UBICAR_PALET", "‚ùå Error al cerrar palet: $error")
                                                        viewModel.setError("Error al cerrar palet: $error")
                                                    }
                                                )
                                            },
                                            onError = { error ->
                                                android.util.Log.e("UBICAR_PALET", "‚ùå Error al obtener palet: $error")
                                                viewModel.setError("Error al obtener palet: $error")
                                            }
                                        )
                                        escaneoProcesado = false
                                    } else {
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Palet no coincide: esperado=$codigoGS1, escaneado=$code (limpio=$codigoLimpio)")
                                        viewModel.setError("‚ùå El palet escaneado no coincide con el esperado. Por favor, escanee el palet correcto.")
                                        escaneoProcesado = false
                                    }
                                }
                                return@onPreviewKeyEvent true
                            }
                            false
                        }
                )
                
                LaunchedEffect(Unit) {
                    focusRequester.requestFocus()
                }
            } else {
                // Scanner de palet - M√≥vil/Tablet (c√°mara)
                QRScannerView(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(250.dp),
                    onCodeScanned = { code ->
                        if (escaneoProcesado) return@QRScannerView
                        escaneoProcesado = true
                        
                        android.util.Log.d("UBICAR_PALET", "üì± C√≥digo GS1 escaneado (C√°mara): $code")
                        
                        // Validar que el c√≥digo GS1 coincida con el palet
                        val codigoLimpio = code.trim().removePrefix("00") // Quitar ceros extra del principio
                        if (codigoLimpio == codigoGS1) {
                            android.util.Log.d("UBICAR_PALET", "‚úÖ Palet validado correctamente")
                            
                            // OBTENER ID INTERNO DEL PALET POR GS1
                            val traspasosLogic = TraspasosLogic()
                            traspasosLogic.obtenerPaletPorGS1(
                                gs1 = codigoLimpio,
                                onSuccess = { palet ->
                                    android.util.Log.d("UBICAR_PALET", "‚úÖ Palet obtenido: ${palet.id}")
                                    paletIdInterno = palet.id // Guardar ID interno
                                    
                                    // CERRAR PALET (genera traspaso "PENDIENTE")
                                    viewModel.cerrarPalet(
                                        id = palet.id, // Usar ID interno, no c√≥digo
                                        usuarioId = usuarioId,
                                        codigoAlmacen = almacenDestinoPalet,
                                        codigoEmpresa = empresa,
                                        onSuccess = { paletId ->
                                            android.util.Log.d("UBICAR_PALET", "‚úÖ Palet cerrado correctamente. Palet ID: $paletId")
                                            // Buscar traspasos pendientes generados por este palet
                                            traspasosLogic.comprobarTraspasoPendiente(
                                                usuarioId = usuarioId,
                                                onSuccess = { traspasos ->
                                                    val traspasosDelPalet = traspasos.filter { it.paletId == paletId }
                                                    if (traspasosDelPalet.isNotEmpty()) {
                                                        traspasoPendienteId = traspasosDelPalet.first().id
                                                        android.util.Log.d("UBICAR_PALET", "üîç Traspasos del palet encontrados: ${traspasosDelPalet.size}, usando ID: $traspasoPendienteId")
                                                        paletEscaneado = true
                                                        esperandoUbicacionDestino = true
                                                        viewModel.limpiarMensajes()
                                                    } else {
                                                        android.util.Log.e("UBICAR_PALET", "‚ùå No se encontraron traspasos para el palet: $paletId")
                                                        viewModel.setError("No se encontraron traspasos pendientes para el palet")
                                                    }
                                                },
                                                onError = { error ->
                                                    android.util.Log.e("UBICAR_PALET", "‚ùå Error al obtener traspasos pendientes: $error")
                                                    viewModel.setError("Error al obtener traspasos pendientes: $error")
                                                }
                                            )
                                        },
                                        onError = { error ->
                                            android.util.Log.e("UBICAR_PALET", "‚ùå Error al cerrar palet: $error")
                                            viewModel.setError("Error al cerrar palet: $error")
                                        }
                                    )
                                },
                                onError = { error ->
                                    android.util.Log.e("UBICAR_PALET", "‚ùå Error al obtener palet: $error")
                                    viewModel.setError("Error al obtener palet: $error")
                                }
                            )
                            escaneoProcesado = false
                        } else {
                            android.util.Log.e("UBICAR_PALET", "‚ùå Palet no coincide: esperado=$codigoGS1, escaneado=$code (limpio=$codigoLimpio)")
                            viewModel.setError("‚ùå El palet escaneado no coincide con el esperado. Por favor, escanee el palet correcto.")
                            escaneoProcesado = false
                        }
                    }
                )
            }
        }
        
        // Bloque de ubicaci√≥n destino (igual que en TraspasosScreen)
        if (esperandoUbicacionDestino) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .zIndex(2f), // asegura que est√© por encima del resto
                contentAlignment = Alignment.Center
            ) {
                Column(
                    modifier = Modifier
                        .padding(24.dp)
                        .background(Color.White, RoundedCornerShape(12.dp))
                        .padding(16.dp)
                        .zIndex(3f)
                ) {
                    Text("Ubicaci√≥n destino requerida", style = MaterialTheme.typography.titleLarge)
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("Escanee una ubicaci√≥n para finalizar el traspaso.")
                    Spacer(modifier = Modifier.height(16.dp))
                }
            }
        }
        
        // Escaneo de ubicaci√≥n destino (PDA)
        if (esperandoUbicacionDestino && DeviceUtils.hasHardwareScanner(context)) {
                Box(
                    modifier = Modifier
                    .fillMaxSize()
                        .focusRequester(focusRequester)
                        .focusable()
                        .onPreviewKeyEvent { event ->
                            if (event.nativeKeyEvent?.action == android.view.KeyEvent.ACTION_MULTIPLE) {
                                event.nativeKeyEvent.characters?.let { code ->
                                    android.util.Log.d("UBICAR_PALET", "üìç Ubicaci√≥n escaneada (PDA): $code")
                                    
                                    // Parsear ubicaci√≥n (formato: ALMACEN$UBICACION)
                                    val (almacen, ubicacion) = if (code.contains('$')) {
                                        val parts = code.split('$')
                                        if (parts.size == 2) parts[0] to parts[1] else {
                                            android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                                            return@onPreviewKeyEvent false
                                        }
                                    } else {
                                        // Si no tiene formato ALMACEN$UBICACION, mostrar error
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                                        return@onPreviewKeyEvent false
                                    }
                                    
                                // COMPLETAR TRASPASO (igual que en TraspasosScreen.kt)
                                val traspasosLogic = TraspasosLogic()
                                val completarDto = CompletarTraspasoDto(
                                    codigoAlmacenDestino = almacen,
                                    ubicacionDestino = ubicacion,
                                    fechaFinalizacion = java.time.LocalDateTime.now().toString(),
                                    usuarioFinalizacionId = usuarioId
                                )
                                
                                traspasosLogic.completarTraspaso(
                                    idTraspaso = traspasoPendienteId!!,
                                    dto = completarDto,
                                    paletId = paletIdInterno,
                                    onSuccess = {
                                        android.util.Log.d("UBICAR_PALET", "‚úÖ Traspaso completado correctamente")
                                        esperandoUbicacionDestino = false
                                        viewModel.limpiarMensajes()
                                        onNavigateBack()
                                    },
                                    onError = { error ->
                                        android.util.Log.e("UBICAR_PALET", "‚ùå Error al completar traspaso: $error")
                                        viewModel.setError("Error al completar traspaso: $error")
                                    }
                                )
                                return@onPreviewKeyEvent true
                            }
                            return@onPreviewKeyEvent false
                        }
                        return@onPreviewKeyEvent false
                    }
            ) {

            }
            
            LaunchedEffect(esperandoUbicacionDestino) {
                if (esperandoUbicacionDestino) {
                    delay(200)
                    focusRequester.requestFocus()
                }
            }
        }
        
        // Escaneo de ubicaci√≥n destino (C√°mara)
        if (esperandoUbicacionDestino && !DeviceUtils.hasHardwareScanner(context)) {
                QRScannerView(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(250.dp),
                    onCodeScanned = { code ->
                        android.util.Log.d("UBICAR_PALET", "üìç Ubicaci√≥n escaneada (C√°mara): $code")
                        
                        // Parsear ubicaci√≥n (formato: ALMACEN$UBICACION)
                        val (almacen, ubicacion) = if (code.contains('$')) {
                            val parts = code.split('$')
                            if (parts.size == 2) parts[0] to parts[1] else {
                            android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                                return@QRScannerView
                            }
                        } else {
                            // Si no tiene formato ALMACEN$UBICACION, mostrar error
                            android.util.Log.e("UBICAR_PALET", "‚ùå Formato de ubicaci√≥n incorrecto: $code")
                            return@QRScannerView
                        }
                        
                    // COMPLETAR TRASPASO (igual que en TraspasosScreen.kt)
                    val traspasosLogic = TraspasosLogic()
                    val completarDto = CompletarTraspasoDto(
                        codigoAlmacenDestino = almacen,
                        ubicacionDestino = ubicacion,
                        fechaFinalizacion = java.time.LocalDateTime.now().toString(),
                        usuarioFinalizacionId = usuarioId
                    )
                    
                    traspasosLogic.completarTraspaso(
                        idTraspaso = traspasoPendienteId!!,
                        dto = completarDto,
                        paletId = paletIdInterno,
                        onSuccess = {
                            android.util.Log.d("UBICAR_PALET", "‚úÖ Traspaso completado correctamente")
                            esperandoUbicacionDestino = false
                            viewModel.limpiarMensajes()
                            onNavigateBack()
                        },
                        onError = { error ->
                            android.util.Log.e("UBICAR_PALET", "‚ùå Error al completar traspaso: $error")
                            viewModel.setError("Error al completar traspaso: $error")
                        }
                    )
                }
            )
        }
        
        // Error
        error?.let { errorMessage ->
            Spacer(modifier = Modifier.height(16.dp))
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
            ) {
                Text(
                    text = errorMessage,
                    modifier = Modifier.padding(16.dp),
                    color = MaterialTheme.colorScheme.onErrorContainer
                )
            }
        }
    }
}

@Composable
fun PaletsPendientesScreen(
    orden: OrdenTraspasoDto,
    paletsPendientes: List<PaletPendienteDto>,
    user: User,
    viewModel: OrdenTraspasoViewModel,
    onNavigateBack: () -> Unit
) {
    // Estados para el di√°logo de confirmaci√≥n
    var mostrarDialogoCerrarPalet by remember { mutableStateOf(false) }
    var idPaletParaCerrar by remember { mutableStateOf<String?>(null) }
    var paletDestinoParaCerrar by remember { mutableStateOf<String?>(null) }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Header
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onNavigateBack) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                    contentDescription = "Volver"
                )
            }
            
            Text(
                text = "Palets Pendientes",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            // Espacio vac√≠o para centrar el t√≠tulo
            Spacer(modifier = Modifier.width(48.dp))
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        if (paletsPendientes.isEmpty()) {
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = "No hay palets pendientes de ubicar",
                    modifier = Modifier.padding(16.dp),
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        } else {
            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(paletsPendientes) { palet ->
                    PaletPendienteCard(
                        palet = palet,
                        onUbicar = {
                            viewModel.setPaletListoParaUbicar(palet.paletDestino)
                            viewModel.setCodigoGS1Palet(palet.codigoGS1)
                            onNavigateBack()
                        },
                        onToggleCerrar = { paletDestino ->
                            idPaletParaCerrar = paletDestino
                            paletDestinoParaCerrar = paletDestino
                            // Tambi√©n establecer el c√≥digo GS1 del palet que se va a cerrar
                            viewModel.setCodigoGS1Palet(palet.codigoGS1)
                            mostrarDialogoCerrarPalet = true
                        }
                    )
                }
            }
        }
        
        // Di√°logo de confirmaci√≥n para cerrar palet
        if (mostrarDialogoCerrarPalet) {
            AlertDialog(
                onDismissRequest = {
                    mostrarDialogoCerrarPalet = false
                    idPaletParaCerrar = null
                    paletDestinoParaCerrar = null
                },
                title = { Text("Cerrar Palet") },
                text = {
                    Column {
                        Text("¬øEst√° seguro de que desea cerrar el palet?")
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Palet: ${paletDestinoParaCerrar ?: "N/A"}",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Una vez cerrado, deber√° ubicar el palet en su destino final.",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                },
                confirmButton = {
                    TextButton(
                        onClick = {
                            mostrarDialogoCerrarPalet = false
                            // Lanzar flujo de ubicaci√≥n
                            viewModel.setPaletListoParaUbicar(paletDestinoParaCerrar!!)
                            onNavigateBack()
                        }
                    ) {
                        Text("S√≠, cerrar")
                    }
                },
                dismissButton = {
                    TextButton(
                        onClick = {
                            mostrarDialogoCerrarPalet = false
                            idPaletParaCerrar = null
                            paletDestinoParaCerrar = null
                        }
                    ) {
                        Text("Cancelar")
                    }
                }
            )
        }
    }
}

@Composable
fun PaletPendienteCard(
    palet: PaletPendienteDto,
    onUbicar: () -> Unit,
    onToggleCerrar: (String) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (palet.listoParaUbicar) 
                MaterialTheme.colorScheme.primaryContainer 
            else 
                MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = palet.paletDestino,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                
                // Toggle para cambiar estado del palet (Abierto/Cerrado)
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
   
                    Spacer(modifier = Modifier.width(8.dp))
                    Switch(
                        checked = true, // Palets pendientes est√°n "Abiertos" (sin ubicar) - mostrar como activado
                        onCheckedChange = { nuevoEstado ->
                            if (!nuevoEstado) {
                                // Cambiar a "Cerrado" - Mostrar di√°logo de confirmaci√≥n
                                onToggleCerrar(palet.paletDestino)
                            } else {
                                // Ya est√° "Abierto" - No hacer nada
                            }
                        }
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Abierto", // Palets pendientes est√°n abiertos
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text("L√≠neas completas: ${palet.lineasCompletas}")
            Text("Cantidad total: ${palet.cantidadTotal}")
            Text(
                text = if (palet.listoParaUbicar) "‚úÖ Listo para ubicar" else "‚è≥ Pendiente",
                color = if (palet.listoParaUbicar) 
                    MaterialTheme.colorScheme.primary 
                else 
                    MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

private fun formatearFecha(fecha: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault())
        val outputFormat = SimpleDateFormat("dd-MM-yyyy HH:mm", Locale.getDefault())
        val date = inputFormat.parse(fecha)
        outputFormat.format(date ?: Date())
    } catch (e: Exception) {
        fecha
    }
}

private fun formatearSoloFecha(fecha: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault())
        val outputFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
        val date = inputFormat.parse(fecha)
        outputFormat.format(date ?: Date())
    } catch (e: Exception) {
        fecha
    }
}

@Composable
fun EscaneoBasicoOrden(
    stockDisponible: List<StockDisponibleDto>,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto,
    ordenSeleccionada: OrdenTraspasoDto?,
    viewModel: OrdenTraspasoViewModel,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    user: User
) {
    // TraspasosLogic para reutilizar la l√≥gica de escaneo
    val traspasosLogic = TraspasosLogic()
    
    val empresa = sessionViewModel.empresaSeleccionada.collectAsState().value?.codigo?.toShort() ?: return
    val context = LocalContext.current
    val focusRequester = remember { FocusRequester() }
    
    // Estados b√°sicos para detecci√≥n inteligente
    var ubicacionEscaneada by remember { mutableStateOf<Pair<String,String>?>(null) }
    var articuloEscaneado by remember { mutableStateOf<ArticuloDto?>(null) }
    var paletEscaneado by remember { mutableStateOf<com.example.sga.data.dto.traspasos.PaletDto?>(null) }
    var escaneoProcesado by remember { mutableStateOf(false) }
    var mostrarDialogoError by remember { mutableStateOf<String?>(null) }
    
    // Sincronizar variables de la UI con el ViewModel
    val articuloValidadoVM by viewModel.articuloValidado.collectAsStateWithLifecycle()
    LaunchedEffect(articuloValidadoVM) {
        if (articuloValidadoVM == null) {
            articuloEscaneado = null
        }
    }
    
    // Informaci√≥n del proceso (inteligente)
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = when {
                paletEscaneado != null && ubicacionEscaneada != null && articuloEscaneado != null -> MaterialTheme.colorScheme.primaryContainer
                paletEscaneado != null -> MaterialTheme.colorScheme.secondaryContainer
                ubicacionEscaneada != null || articuloEscaneado != null -> MaterialTheme.colorScheme.tertiaryContainer
                else -> MaterialTheme.colorScheme.surfaceVariant
            }
        )
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            when {
                paletEscaneado == null && ubicacionEscaneada == null && articuloEscaneado == null -> {
                    android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: ESCANEE Palet o Ubicaci√≥n")
                    Text(
                        text = "ESCANEE Palet o Ubicaci√≥n",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                    lineaSeleccionada?.let { linea ->
                        if (stockDisponible.isNotEmpty()) {
                            val stock = stockDisponible.first()
                            Text(
                                text = "Escanee palet existente o ubicaci√≥n: ${stock.codigoAlmacen}/${stock.ubicacion}",
                                style = MaterialTheme.typography.bodyMedium
                            )
                        } else {
                            Text(
                                text = "Escanee palet existente o ubicaci√≥n para empezar",
                                style = MaterialTheme.typography.bodyMedium
                            )
                        }
                    }
                }
                paletEscaneado != null && ubicacionEscaneada == null -> {
                    android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: Palet seleccionado + X")
                    Column {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "Palet seleccionado: ${paletEscaneado!!.codigoPalet}",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary,
                                modifier = Modifier.weight(1f)
                            )
                            
                            // Bot√≥n X al lado del c√≥digo del palet
                            Text(
                                text = "‚úï",
                                color = MaterialTheme.colorScheme.error,
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.clickable {
                                    android.util.Log.d("UI_PALET_CENTRO", "üóëÔ∏è Click en X para deseleccionar palet desde centro")
                                    paletEscaneado = null  // Limpia variable local
                                    viewModel.deseleccionarPalet() // Limpia ViewModel
                                }
                            )
                        }
                    }
                    Text(
                        text = "Ahora escanee la ubicaci√≥n:",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = "${stockDisponible.first().codigoAlmacen} - ${stockDisponible.first().ubicacion}",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                }
                paletEscaneado != null && ubicacionEscaneada != null && articuloEscaneado == null -> {
                    android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: Palet + Ubicaci√≥n OK + X")
                    Column {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "Palet: ${paletEscaneado!!.codigoPalet} | Ubicaci√≥n: OK",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary,
                                modifier = Modifier.weight(1f)
                            )
                            
                            // Bot√≥n X al lado del c√≥digo del palet
                            Text(
                                text = "‚úï",
                                color = MaterialTheme.colorScheme.error,
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.clickable {
                                    android.util.Log.d("UI_PALET_CENTRO", "üóëÔ∏è Click en X para deseleccionar palet desde centro (ubicaci√≥n OK)")
                                    paletEscaneado = null  // Limpia variable local
                                    viewModel.deseleccionarPalet() // Limpia ViewModel
                                }
                            )
                        }
                    }
                    Text(
                        text = "Ahora escanee el art√≠culo:",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = lineaSeleccionada.codigoArticulo,
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                }
                ubicacionEscaneada != null && articuloEscaneado == null && paletEscaneado == null -> {
                    android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: Solo ubicaci√≥n")
                    Text(
                        text = "Ubicaci√≥n: ${ubicacionEscaneada!!.first}-${ubicacionEscaneada!!.second}",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Text(
                        text = "Ahora escanee el art√≠culo:",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = lineaSeleccionada.codigoArticulo,
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }
    }
    
    // PASO 2: Gestionar palet (cuando todo est√© escaneado O ya tengamos palet)
    when {
        // Caso 1: Ya tiene palet escaneado + ubicaci√≥n + art√≠culo = Listo para a√±adir
        paletEscaneado != null && ubicacionEscaneada != null && articuloEscaneado != null -> {
            android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: TODO ESCANEADO - PaletExistenteSeccion")
            Spacer(modifier = Modifier.height(16.dp))
            
            // Mostrar palet y bot√≥n a√±adir
            PaletExistenteSeccion(
                palet = paletEscaneado!!,
                articulo = articuloEscaneado!!,
                ubicacion = ubicacionEscaneada!!,
                lineaSeleccionada = lineaSeleccionada,
                viewModel = viewModel
            )
        }
        
        // Caso 2: Ubicaci√≥n + art√≠culo (flujo tradicional) = Crear o escanear palet
        ubicacionEscaneada != null && articuloEscaneado != null && paletEscaneado == null -> {
            android.util.Log.d("UI_PALET_CENTRO", "üîç Mostrando secci√≥n: UBICACI√ìN + ART√çCULO - GestionarPaletSeccion")
        Spacer(modifier = Modifier.height(16.dp))
        
        GestionarPaletSeccion(
            articuloEscaneado = articuloEscaneado!!,
            ubicacionEscaneada = ubicacionEscaneada!!,
            lineaSeleccionada = lineaSeleccionada,
            ordenSeleccionada = ordenSeleccionada,
            viewModel = viewModel,
            sessionViewModel = sessionViewModel,
            user = user,
            traspasosLogic = traspasosLogic,
            focusRequester = focusRequester,
            escaneoProcesado = escaneoProcesado,
            onEscaneoProcesado = { escaneoProcesado = it }
        )
        }
    }
    
    // Captura de escaneos - PDA
    if (DeviceUtils.hasHardwareScanner(context)) {
        Box(
            modifier = Modifier
                .focusRequester(focusRequester)
                .focusable()
                .onPreviewKeyEvent { event ->
                    if (event.nativeKeyEvent?.action == android.view.KeyEvent.ACTION_MULTIPLE) {
                        if (escaneoProcesado) return@onPreviewKeyEvent true
                        escaneoProcesado = true

                        event.nativeKeyEvent.characters?.let { code ->
                            traspasosLogic.procesarCodigoEscaneado(
                                code = code.trim(),
                                empresaId = empresa,
                                onUbicacionDetectada = { codAlm, codUbi ->
                                    val stockEsperado = stockDisponible.first()
                                    if (codAlm.trim().uppercase() == stockEsperado.codigoAlmacen?.trim()?.uppercase() &&
                                        codUbi.trim().uppercase() == stockEsperado.ubicacion?.trim()?.uppercase()) {
                                        ubicacionEscaneada = codAlm to codUbi
                                        viewModel.setMensaje("‚úÖ Ubicaci√≥n validada correctamente")
                                    } else {
                                        mostrarDialogoError = "‚ùå Ubicaci√≥n incorrecta\n\nDebe ir a: ${stockEsperado.codigoAlmacen}/${stockEsperado.ubicacion}\nHa escaneado: $codAlm/$codUbi"
                                    }
                                    escaneoProcesado = false
                                },
                                onArticuloDetectado = { articuloDto ->
                                    // Verificar si estamos en la fase inicial (debe escanear palet o ubicaci√≥n)
                                    if (paletEscaneado == null && ubicacionEscaneada == null && articuloEscaneado == null) {
                                        // Fase inicial: mostrar error porque debe escanear palet o ubicaci√≥n
                                        mostrarDialogoError = "‚ùå Escaneo incorrecto\n\nDebe escanear un palet (SSCC) o una ubicaci√≥n.\nHa escaneado un art√≠culo: ${articuloDto.codigoArticulo}"
                                    } else if (articuloDto.codigoArticulo.trim().uppercase() == lineaSeleccionada.codigoArticulo.trim().uppercase()) {
                                        // Fase correcta: validar art√≠culo
                                        articuloEscaneado = articuloDto
                                        viewModel.setMensaje("‚úÖ Art√≠culo validado correctamente")
                                    } else {
                                        // Art√≠culo incorrecto
                                        val articuloEsperado = lineaSeleccionada.codigoArticulo
                                        mostrarDialogoError = "‚ùå Art√≠culo incorrecto\n\nDebe escanear: $articuloEsperado\nHa escaneado: ${articuloDto.codigoArticulo}"
                                    }
                                    escaneoProcesado = false
                                },
                                onMultipleArticulos = { articulos ->
                                    val articuloCorrecto = articulos.find { 
                                        it.codigoArticulo.trim().uppercase() == lineaSeleccionada.codigoArticulo.trim().uppercase() 
                                    }
                                    if (articuloCorrecto != null) {
                                        articuloEscaneado = articuloCorrecto
                                        viewModel.setMensaje("‚úÖ Art√≠culo validado correctamente")
                                    } else {
                                        mostrarDialogoError = "‚ùå Art√≠culo no encontrado\n\nDebe escanear espec√≠ficamente: ${lineaSeleccionada.codigoArticulo}"
                                    }
                                    escaneoProcesado = false
                                },
                                onPaletDetectado = { palet ->
                                    // DETECCI√ìN INTELIGENTE: Palet se puede escanear en cualquier momento
                                    if (palet.estado.equals("Abierto", ignoreCase = true)) {
                                        paletEscaneado = palet
                                        viewModel.setPaletSeleccionado(palet)
                                        viewModel.obtenerLineasPalet(palet.id)
                                        viewModel.setMensaje("‚úÖ Palet ${palet.codigoPalet} seleccionado correctamente")
                                    } else {
                                        mostrarDialogoError = "‚ùå Palet cerrado\n\nEl palet ${palet.codigoPalet} est√° cerrado.\nDebe escanear un palet abierto."
                                }
                                    escaneoProcesado = false
                                },
                                onError = { error ->
                                    mostrarDialogoError = "‚ùå Error de escaneo\n\n$error"
                                    escaneoProcesado = false
                                }
                            )
                        }
                        true
                    } else false
                }
                .layout { measurable, constraints ->
                    val placeable = measurable.measure(constraints)
                    layout(0, 0) { placeable.place(0, 0) }
                }
        )
        
        LaunchedEffect(Unit) {
            focusRequester.requestFocus()
        }
    }
    
    // Captura de escaneos - M√≥vil/Tablet
    if (!DeviceUtils.hasHardwareScanner(context)) {
        Spacer(modifier = Modifier.height(16.dp))
        
        QRScannerView(
            modifier = Modifier.fillMaxWidth().height(250.dp),
            onCodeScanned = { code ->
                if (escaneoProcesado) return@QRScannerView
                escaneoProcesado = true
                
                traspasosLogic.procesarCodigoEscaneado(
                    code = code.trim(),
                    empresaId = empresa,
                    onUbicacionDetectada = { codAlm, codUbi ->
                        val stockEsperado = stockDisponible.first()
                        if (codAlm.trim().uppercase() == stockEsperado.codigoAlmacen?.trim()?.uppercase() &&
                            codUbi.trim().uppercase() == stockEsperado.ubicacion?.trim()?.uppercase()) {
                            ubicacionEscaneada = codAlm to codUbi
                            viewModel.setMensaje("‚úÖ Ubicaci√≥n validada correctamente")
                        } else {
                            mostrarDialogoError = "‚ùå Ubicaci√≥n incorrecta\n\nDebe ir a: ${stockEsperado.codigoAlmacen}/${stockEsperado.ubicacion}\nHa escaneado: $codAlm/$codUbi"
                        }
                        escaneoProcesado = false
                    },
                    onArticuloDetectado = { articuloDto ->
                        // Verificar si estamos en la fase inicial (debe escanear palet o ubicaci√≥n)
                        if (paletEscaneado == null && ubicacionEscaneada == null && articuloEscaneado == null) {
                            // Fase inicial: mostrar error porque debe escanear palet o ubicaci√≥n
                            mostrarDialogoError = "‚ùå Escaneo incorrecto\n\nDebe escanear un palet (SSCC) o una ubicaci√≥n.\nHa escaneado un art√≠culo: ${articuloDto.codigoArticulo}"
                        } else if (articuloDto.codigoArticulo.trim().uppercase() == lineaSeleccionada.codigoArticulo.trim().uppercase()) {
                            // Fase correcta: validar art√≠culo
                            articuloEscaneado = articuloDto
                            viewModel.setMensaje("‚úÖ Art√≠culo validado correctamente")
                        } else {
                            // Art√≠culo incorrecto
                            mostrarDialogoError = "‚ùå Art√≠culo incorrecto\n\nDebe escanear: ${lineaSeleccionada.codigoArticulo}\nHa escaneado: ${articuloDto.codigoArticulo}"
                        }
                        escaneoProcesado = false
                    },
                    onMultipleArticulos = { articulos ->
                        val articuloCorrecto = articulos.find { 
                            it.codigoArticulo.trim().uppercase() == lineaSeleccionada.codigoArticulo.trim().uppercase() 
                        }
                        if (articuloCorrecto != null) {
                            articuloEscaneado = articuloCorrecto
                            viewModel.setMensaje("‚úÖ Art√≠culo validado correctamente")
                        } else {
                            mostrarDialogoError = "‚ùå Art√≠culo no encontrado\n\nDebe escanear espec√≠ficamente: ${lineaSeleccionada.codigoArticulo}"
                        }
                        escaneoProcesado = false
                    },
                    onPaletDetectado = { palet ->
                        // DETECCI√ìN INTELIGENTE: Palet se puede escanear en cualquier momento
                        if (palet.estado.equals("Abierto", ignoreCase = true)) {
                            paletEscaneado = palet
                            viewModel.setPaletSeleccionado(palet)
                            viewModel.obtenerLineasPalet(palet.id)
                            viewModel.setMensaje("‚úÖ Palet ${palet.codigoPalet} seleccionado correctamente")
                        } else {
                            mostrarDialogoError = "‚ùå Palet cerrado\n\nEl palet ${palet.codigoPalet} est√° cerrado.\nDebe escanear un palet abierto."
                        }
                        escaneoProcesado = false
                    },
                    onError = { error ->
                        mostrarDialogoError = "‚ùå Error de escaneo\n\n$error"
                        escaneoProcesado = false
                    }
                )
                
                // Reset despu√©s de un tiempo
                kotlinx.coroutines.GlobalScope.launch {
                    kotlinx.coroutines.delay(1000)
                    escaneoProcesado = false
                }
            }
        )
    }
    
    // DI√ÅLOGO DE ERROR - Simple y claro
    mostrarDialogoError?.let { mensaje ->
        AlertDialog(
            onDismissRequest = { mostrarDialogoError = null },
            title = { Text("Error de escaneo") },
            text = { Text(mensaje) },
            confirmButton = {
                TextButton(onClick = { mostrarDialogoError = null }) { 
                    Text("Reintentar") 
                }
            }
        )
    }
}

@Composable
fun PaletExistenteSeccion(
    palet: com.example.sga.data.dto.traspasos.PaletDto,
    articulo: ArticuloDto,
    ubicacion: Pair<String, String>,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto,
    viewModel: OrdenTraspasoViewModel
) {
    val lineasPalet by viewModel.lineasPalet.collectAsStateWithLifecycle()
    val lineasDelPalet = lineasPalet[palet.id] ?: emptyList()
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = "PALET SELECCIONADO",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Informaci√≥n del palet
            Text(
                text = "Palet: ${palet.codigoPalet}",
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Bold
            )
            Text(
                text = "Tipo: ${palet.tipoPaletCodigo}",
                style = MaterialTheme.typography.bodyMedium
            )
            Text(
                text = "Estado: ${palet.estado}",
                style = MaterialTheme.typography.bodyMedium
            )
            
            // L√≠neas existentes en el palet
            if (lineasDelPalet.isNotEmpty()) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Art√≠culos actuales:",
                    style = MaterialTheme.typography.bodySmall,
                    fontWeight = FontWeight.Bold
                )
                lineasDelPalet.forEach { linea ->
                    Text(
                        text = "‚Ä¢ ${linea.codigoArticulo}: ${linea.cantidad} uds",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Bot√≥n para a√±adir art√≠culo
            Button(
                onClick = {
                    viewModel.activarDialogoCantidadDirecto(
                        palet = palet,
                        articulo = articulo,
                        ubicacion = ubicacion,
                        linea = lineaSeleccionada
                    )
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary
                )
            ) {
                Text("‚ûï A√±adir ${articulo.codigoArticulo} al palet")
            }
        }
    }
}

@Composable
fun GestionarPaletSeccion(
    articuloEscaneado: ArticuloDto,
    ubicacionEscaneada: Pair<String, String>,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto,
    ordenSeleccionada: OrdenTraspasoDto?,
    viewModel: OrdenTraspasoViewModel,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    user: User,
    traspasosLogic: TraspasosLogic,
    focusRequester: FocusRequester,
    escaneoProcesado: Boolean,
    onEscaneoProcesado: (Boolean) -> Unit
) {
    val empresa = sessionViewModel.empresaSeleccionada.collectAsState().value?.codigo?.toShort() ?: return
    val usuarioId = user.id.toIntOrNull() ?: return
    val context = LocalContext.current
    
    // Estados del ViewModel para palets
    val tiposPalet by viewModel.tiposPalet.collectAsStateWithLifecycle()
    val paletSeleccionado by viewModel.paletSeleccionado.collectAsStateWithLifecycle()
    val cargando by viewModel.cargando.collectAsStateWithLifecycle()
    
    // Estados para impresi√≥n
    val impresoras by viewModel.impresoras.collectAsStateWithLifecycle()
    val impresoraSeleccionada by sessionViewModel.impresoraSeleccionada.collectAsState()
    val impresoraNombre = impresoraSeleccionada ?: ""
    
    // Estados locales
    var tipoSeleccionado by remember { mutableStateOf<String?>(null) }
    var dropOpen by remember { mutableStateOf(false) }
    var mostrarDialogoConfirmar by remember { mutableStateOf(false) }
    var mostrarDialogoError by remember { mutableStateOf<String?>(null) }
    
    // Estados para impresi√≥n (ya no se usan aqu√≠ - se manejan en funci√≥n principal)
    var copias by remember { mutableIntStateOf(1) }
    var dropOpenImpresora by remember { mutableStateOf(false) }
    
    // Estados para cerrar palet
    var mostrarDialogoCerrarPalet by remember { mutableStateOf(false) }
    var idPaletParaCerrar by remember { mutableStateOf<String?>(null) }
    var esperandoUbicacionDestino by remember { mutableStateOf(false) }
    var traspasoPendienteId by remember { mutableStateOf<String?>(null) }
    var mostrarDialogoExito by remember { mutableStateOf(false) }
    
    // Cargar tipos de palet e impresoras
    LaunchedEffect(Unit) {
        viewModel.cargarTiposPalet()
        viewModel.cargarImpresoras()
    }
    
    // NOTA: Ya no se llama a ubicarPaletEnOrden - el flujo ahora es:
    // 1. Completar traspaso (devuelve ID del traspaso)
    // 2. Actualizar l√≠nea de orden con ese ID
    
    // Verificar si hay palet seleccionado y est√° abierto
    val hayPaletAbierto = paletSeleccionado != null && 
                         paletSeleccionado!!.estado.equals("Abierto", ignoreCase = true)
    
    // BLOQUEO: Si estamos esperando ubicaci√≥n destino, solo mostrar instrucciones
    if (esperandoUbicacionDestino) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(
                    text = "TRASPASO PENDIENTE",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.error
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Escanee la ubicaci√≥n DESTINO para completar el traspaso:",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = "ID Traspaso: $traspasoPendienteId",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
        
        // Captura de escaneos para ubicaci√≥n destino - PDA
        if (DeviceUtils.hasHardwareScanner(context)) {
            Box(
                modifier = Modifier
                    .focusRequester(focusRequester)
                    .focusable()
                    .onPreviewKeyEvent { event ->
                        if (event.nativeKeyEvent?.action == android.view.KeyEvent.ACTION_MULTIPLE) {
                            event.nativeKeyEvent.characters?.let { code ->
                                manejarEscaneoDestino(
                                    code = code.trim(),
                                    empresa = empresa,
                                    traspasosLogic = traspasosLogic,
                                    onUbicacionDestino = { almacenDestino, ubicacionDestino ->
                                        // Completar traspaso
                                        viewModel.completarTraspaso(
                                            id = traspasoPendienteId!!,
                                            codigoAlmacenDestino = almacenDestino,
                                            ubicacionDestino = ubicacionDestino,
                                            usuarioId = usuarioId,
                                            paletId = paletSeleccionado?.id,
                                            onSuccess = {
                                                // Traspaso completado exitosamente
                                                esperandoUbicacionDestino = false
                                                traspasoPendienteId = null
                                                mostrarDialogoExito = true
                                            },
                                            onError = { error ->
                                                mostrarDialogoError = "‚ùå Error al completar traspaso\n\n$error"
                                            }
                                        )
                                    },
                                    onError = { error ->
                                        mostrarDialogoError = "‚ùå Error de escaneo\n\n$error"
                                    }
                                )
                            }
                            true
                        } else false
                    }
                    .layout { measurable, constraints ->
                        val placeable = measurable.measure(constraints)
                        layout(0, 0) { placeable.place(0, 0) }
                    }
            )
            
            LaunchedEffect(esperandoUbicacionDestino) {
                if (esperandoUbicacionDestino) {
                    focusRequester.requestFocus()
                }
            }
        }
        
        // Captura de escaneos para ubicaci√≥n destino - M√≥vil/Tablet
        if (!DeviceUtils.hasHardwareScanner(context)) {
            Spacer(modifier = Modifier.height(16.dp))
            
            QRScannerView(
                modifier = Modifier.fillMaxWidth().height(250.dp),
                onCodeScanned = { code ->
                    manejarEscaneoDestino(
                        code = code.trim(),
                        empresa = empresa,
                        traspasosLogic = traspasosLogic,
                        onUbicacionDestino = { almacenDestino, ubicacionDestino ->
                            // Completar traspaso
                            viewModel.completarTraspaso(
                                id = traspasoPendienteId!!,
                                codigoAlmacenDestino = almacenDestino,
                                ubicacionDestino = ubicacionDestino,
                                usuarioId = usuarioId,
                                paletId = paletSeleccionado?.id,
                                onSuccess = {
                                    // Traspaso completado exitosamente
                                    esperandoUbicacionDestino = false
                                    traspasoPendienteId = null
                                    mostrarDialogoExito = true
                                },
                                onError = { error ->
                                    mostrarDialogoError = "‚ùå Error al completar traspaso\n\n$error"
                                }
                            )
                        },
                        onError = { error ->
                            mostrarDialogoError = "‚ùå Error de escaneo\n\n$error"
                        }
                    )
                }
            )
        }
        
        return // No mostrar el resto de la UI cuando estamos esperando destino
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (hayPaletAbierto) 
                MaterialTheme.colorScheme.secondaryContainer 
            else 
                MaterialTheme.colorScheme.primaryContainer
        )
    ) {
        LazyColumn(
            modifier = Modifier
                .padding(16.dp)
                .heightIn(max = 600.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            if (hayPaletAbierto) {
                // CASO: Ya hay un palet abierto
                item {
                    Text(
                        text = "Usar palet existente",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                
                item { Spacer(modifier = Modifier.height(12.dp)) }
                
                item {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                    ) {
                    Column(modifier = Modifier.padding(12.dp)) {
                        // Header con informaci√≥n del palet y bot√≥n de deselecci√≥n
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = "Palet actual: ${paletSeleccionado!!.codigoPalet}",
                                    style = MaterialTheme.typography.bodyLarge,
                                    fontWeight = FontWeight.Bold
                                )
                                Text(
                                    text = "Tipo: ${paletSeleccionado!!.tipoPaletCodigo}",
                                    style = MaterialTheme.typography.bodyMedium
                                )
                                paletSeleccionado!!.ordenTrabajoId?.let { orden ->
                                    Text(
                                        text = "Orden: $orden",
                                        style = MaterialTheme.typography.bodySmall
                                    )
                                }
                            }
                            
                            // Bot√≥n X para deseleccionar palet
                            IconButton(
                                onClick = {
                                    android.util.Log.d("UI_PALET", "üóëÔ∏è Click en deseleccionar palet")
                                    viewModel.deseleccionarPalet() // Limpia ViewModel
                                },
                                modifier = Modifier
                                    .size(32.dp)
                                    .background(
                                        MaterialTheme.colorScheme.errorContainer,
                                        CircleShape
                                    )
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Close,
                                    contentDescription = "Deseleccionar palet",
                                    tint = MaterialTheme.colorScheme.onErrorContainer,
                                    modifier = Modifier.size(20.dp)
                                )
                            }
                        }
                        
                        
                        // Mostrar l√≠neas del palet con scroll
                        val lineasPalet by viewModel.lineasPalet.collectAsStateWithLifecycle()
                        val lineasDelPalet = lineasPalet[paletSeleccionado!!.id] ?: emptyList()
                        
                        if (lineasDelPalet.isNotEmpty()) {
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "Art√≠culos en el palet:",
                                style = MaterialTheme.typography.bodySmall,
                                fontWeight = FontWeight.Bold
                            )
                            
                            // Lista con scroll para las l√≠neas del palet
                            LazyColumn(
                                modifier = Modifier
                                    .heightIn(max = 300.dp)
                                    .fillMaxWidth(),
                                verticalArrangement = Arrangement.spacedBy(4.dp)
                            ) {
                                items(lineasDelPalet) { linea ->
                                    Column {
                                        Text(
                                            text = "‚Ä¢ ${linea.codigoArticulo}: ${linea.cantidad} uds",
                                            style = MaterialTheme.typography.bodySmall,
                                            color = MaterialTheme.colorScheme.onSurfaceVariant
                                        )
                                        // Mostrar lote/partida si est√° disponible
                                        linea.lote?.let { lote ->
                                            Text(
                                                text = "  Lote: $lote",
                                                style = MaterialTheme.typography.bodySmall,
                                                color = MaterialTheme.colorScheme.onSurfaceVariant
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                    }
                }
                
                item { Spacer(modifier = Modifier.height(12.dp)) }
                
                // Bot√≥n para a√±adir al palet existente (FUERA del Card)
                item {
                    Button(
                        onClick = {
                            // Activar di√°logo de cantidad directamente (sin impresi√≥n)
                            viewModel.activarDialogoCantidadDirecto(
                                palet = paletSeleccionado!!,
                                articulo = articuloEscaneado!!,
                                ubicacion = ubicacionEscaneada!!,
                                linea = lineaSeleccionada
                            )
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Text("‚ûï A√±adir art√≠culo al palet")
                    }
                }
                
            } else {
                // CASO: No hay palet o est√° cerrado - Crear nuevo
                item {
                    Text(
                        text = "Crear palet o escanear uno existente",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                
                item { Spacer(modifier = Modifier.height(12.dp)) }
                                
                // Selector de tipo de palet
                item {
                    Box {
                    OutlinedTextField(
                        readOnly = true,
                        value = tiposPalet
                            .firstOrNull { it.codigoPalet == tipoSeleccionado }
                            ?.let { "${it.codigoPalet} - ${it.descripcion}" }
                            ?: "",
                        onValueChange = {},
                        label = { Text("Tipo de palet") },
                        modifier = Modifier.fillMaxWidth(),
                        trailingIcon = {
                            IconButton(onClick = { dropOpen = !dropOpen }) {
                                Icon(Icons.Default.ArrowDropDown, contentDescription = null)
                            }
                        }
                    )

                    DropdownMenu(
                        expanded = dropOpen,
                        onDismissRequest = { dropOpen = false }
                    ) {
                        tiposPalet.forEach { tipo ->
                            DropdownMenuItem(
                                text = { Text("${tipo.codigoPalet} - ${tipo.descripcion}") },
                                onClick = {
                                    tipoSeleccionado = tipo.codigoPalet
                                    dropOpen = false
                                }
                            )
                        }
                    }
                    }
                }

                item { Spacer(modifier = Modifier.height(16.dp)) }

                // Orden de trabajo (autom√°tica)
                item {
                    OutlinedTextField(
                    value = ordenSeleccionada?.codigoOrden ?: "",
                    onValueChange = { },
                    readOnly = true,
                    label = { Text("Orden de trabajo") },
                    modifier = Modifier.fillMaxWidth(),
                    colors = OutlinedTextFieldDefaults.colors(
                        disabledTextColor = MaterialTheme.colorScheme.onSurface,
                        disabledBorderColor = MaterialTheme.colorScheme.outline,
                        disabledLabelColor = MaterialTheme.colorScheme.onSurfaceVariant
                    ),
                    enabled = false
                    )
                }

                item { Spacer(modifier = Modifier.height(16.dp)) }

                // Bot√≥n crear palet
                item {
                    Button(
                    onClick = { mostrarDialogoConfirmar = true },
                    enabled = tipoSeleccionado != null && !cargando,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    if (cargando) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(16.dp),
                            strokeWidth = 2.dp,
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                    }
                    Text("Crear palet nuevo")
                    }
                }
            }
            
            item { Spacer(modifier = Modifier.height(16.dp)) }
            
            // Informaci√≥n del art√≠culo a a√±adir (solo cuando hay palet creado)
            if (hayPaletAbierto) {
                item {
                    Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(modifier = Modifier.padding(12.dp)) {
                        Text(
                            text = "Art√≠culo a a√±adir:",
                            style = MaterialTheme.typography.labelMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        Text(
                            text = "üì¶ ${articuloEscaneado.codigoArticulo}",
                            style = MaterialTheme.typography.bodyLarge,
                            fontWeight = FontWeight.Bold
                        )
                        articuloEscaneado.descripcion?.let { desc ->
                            Text(
                                text = desc,
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                        Text(
                            text = "Cantidad: ${lineaSeleccionada.cantidadPlan}",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        articuloEscaneado.partida?.let { partida ->
                            Text(
                                text = "Partida: $partida",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }
                    }
                }
            }
        }
    }
    
    // Escaneo de palets (solo si no hay hardware scanner activo en el componente padre)
    if (!hayPaletAbierto && !DeviceUtils.hasHardwareScanner(context)) {
        Spacer(modifier = Modifier.height(16.dp))
        
        QRScannerView(
            modifier = Modifier.fillMaxWidth().height(200.dp),
            onCodeScanned = { code ->
                if (escaneoProcesado) return@QRScannerView
                onEscaneoProcesado(true)
                
                traspasosLogic.procesarCodigoEscaneado(
                    code = code.trim(),
                    empresaId = empresa,
                    onUbicacionDetectada = { _, _ ->
                        mostrarDialogoError = "‚ùå Ha escaneado una ubicaci√≥n\n\nDebe escanear un palet (SSCC) o crear uno nuevo."
                        onEscaneoProcesado(false)
                    },
                    onArticuloDetectado = { _ ->
                        mostrarDialogoError = "‚ùå Ha escaneado un art√≠culo\n\nDebe escanear un palet (SSCC) o crear uno nuevo."
                        onEscaneoProcesado(false)
                    },
                    onMultipleArticulos = { _ ->
                        mostrarDialogoError = "‚ùå Ha escaneado un art√≠culo\n\nDebe escanear un palet (SSCC) o crear uno nuevo."
                        onEscaneoProcesado(false)
                    },
                    onPaletDetectado = { palet ->
                        if (palet.estado.equals("Abierto", ignoreCase = true)) {
                            viewModel.setPaletSeleccionado(palet)
                            viewModel.obtenerLineasPalet(palet.id) // ‚úÖ OBTENER L√çNEAS
                            viewModel.setMensaje("Palet ${palet.codigoPalet} seleccionado correctamente")
                        } else {
                            mostrarDialogoError = "‚ùå Palet cerrado\n\nEl palet ${palet.codigoPalet} est√° cerrado.\nDebe escanear un palet abierto o crear uno nuevo."
                        }
                        onEscaneoProcesado(false)
                    },
                    onError = { error ->
                        mostrarDialogoError = "‚ùå Error de escaneo\n\n$error"
                        onEscaneoProcesado(false)
                    }
                )
            }
        )
    }
    
    // Di√°logo de confirmaci√≥n para crear palet
    if (mostrarDialogoConfirmar) {
        AlertDialog(
            onDismissRequest = { mostrarDialogoConfirmar = false },
            title = { Text("Confirmar creaci√≥n de palet") },
            text = {
                Column {
                    Text("Se crear√° un palet nuevo con:")
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("‚Ä¢ Tipo: ${tiposPalet.find { it.codigoPalet == tipoSeleccionado }?.descripcion}")
                    Text("‚Ä¢ Orden: ${ordenSeleccionada?.codigoOrden ?: ""}")
                    Text("‚Ä¢ Ubicaci√≥n origen: ${ubicacionEscaneada.first}/${ubicacionEscaneada.second}")
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        mostrarDialogoConfirmar = false
                        viewModel.crearPalet(
                            PaletCrearDto(
                                codigoEmpresa = empresa,
                                usuarioAperturaId = usuarioId,
                                tipoPaletCodigo = tipoSeleccionado!!,
                                ordenTrabajoId = ordenSeleccionada?.codigoOrden
                            )
                        ) { nuevoPalet ->
                            // Palet creado exitosamente
                            android.util.Log.d("CREAR_PALET", "Palet creado: ${nuevoPalet.codigoPalet}")
                            viewModel.setPaletSeleccionado(nuevoPalet)
                            viewModel.setMensaje("Palet ${nuevoPalet.codigoPalet} creado correctamente")
                            // Activar impresi√≥n obligatoria usando ViewModel
                            android.util.Log.d("CREAR_PALET", "üñ®Ô∏è Activando di√°logo v√≠a ViewModel")
                            viewModel.activarDialogoImpresion(
                                palet = nuevoPalet,
                                articulo = articuloEscaneado,
                                ubicacion = ubicacionEscaneada,
                                linea = lineaSeleccionada
                            )
                        }
                    }
                ) { Text("Crear") }
            },
            dismissButton = {
                TextButton(onClick = { mostrarDialogoConfirmar = false }) { 
                    Text("Cancelar") 
                }
            }
        )
    }
    
    // Di√°logo de error
    mostrarDialogoError?.let { mensaje ->
        AlertDialog(
            onDismissRequest = { mostrarDialogoError = null },
            title = { Text("Error de escaneo") },
            text = { Text(mensaje) },
            confirmButton = {
                TextButton(onClick = { mostrarDialogoError = null }) { 
                    Text("Reintentar") 
                }
            }
        )
    }
    
    // DI√ÅLOGO DE CONFIRMACI√ìN PARA CERRAR PALET
    if (mostrarDialogoCerrarPalet && idPaletParaCerrar != null) {
        AlertDialog(
            onDismissRequest = { mostrarDialogoCerrarPalet = false },
            title = { Text("Cerrar palet") },
            text = {
                Column {
                    Text(
                        text = "¬øEst√° seguro de que desea cerrar el palet?",
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("Palet: ${paletSeleccionado?.codigoPalet}")
                    Text("Esta acci√≥n crear√° un traspaso en estado PENDIENTE")
                    Text("Deber√° escanear la ubicaci√≥n destino para completarlo")
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        mostrarDialogoCerrarPalet = false
                        
                        viewModel.cerrarPalet(
                            id = idPaletParaCerrar!!,
                            usuarioId = usuarioId,
                            codigoAlmacen = ubicacionEscaneada?.first,
                            codigoEmpresa = empresa,
                            onSuccess = { traspasoId ->
                                // Palet cerrado exitosamente - activar bloqueo
                                esperandoUbicacionDestino = true
                                traspasoPendienteId = traspasoId
                                idPaletParaCerrar = null
                                viewModel.setMensaje("Palet cerrado. Traspaso creado: $traspasoId")
                                viewModel.setMensaje("Escanee la ubicaci√≥n destino para completar el traspaso")
                            },
                            onError = { error ->
                                mostrarDialogoError = "‚ùå Error al cerrar palet\n\n$error"
                            }
                        )
                    }
                ) { 
                    Text("S√≠, cerrar palet") 
                }
            },
            dismissButton = {
                TextButton(onClick = { 
                    mostrarDialogoCerrarPalet = false
                    idPaletParaCerrar = null
                }) { 
                    Text("Cancelar") 
                }
            }
        )
    }
    
    // DI√ÅLOGO DE √âXITO (solo mostrar brevemente y luego continuar autom√°ticamente)
    if (mostrarDialogoExito) {
        AlertDialog(
            onDismissRequest = {
                mostrarDialogoExito = false
            },
            title = { Text("Trabajo completado") },
            text = {
                Column {
                    Text("Art√≠culo completado exitosamente")
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Continuando autom√°ticamente...",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            },
            confirmButton = {
                TextButton(onClick = { 
                    mostrarDialogoExito = false
                }) { 
                    Text("Continuar") 
                }
            }
        )
        
        // Auto-continuar despu√©s de 2 segundos
        LaunchedEffect(mostrarDialogoExito) {
            if (mostrarDialogoExito) {
                kotlinx.coroutines.delay(2000) // 2 segundos
                mostrarDialogoExito = false
            }
        }
    }
    
}

@Composable
fun HeaderCompacto(
    orden: OrdenTraspasoDto,
    user: User?,
    paletActivo: String?,
    paletsPendientes: List<PaletPendienteDto>,
    onVerPaletsPendientes: () -> Unit,
    paletSeleccionado: com.example.sga.data.dto.traspasos.PaletDto?,
    onCerrarPalet: (String) -> Unit,
    onAbrirPalet: (String) -> Unit,
    viewModel: OrdenTraspasoViewModel,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
        ) {
            // FILA 1: Informaci√≥n b√°sica de la orden
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // INFORMACI√ìN DE LA ORDEN
                Column(modifier = Modifier.weight(0.6f)) {
                    Text(
                        text = orden.codigoOrden ?: "Sin c√≥digo",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(6.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        EstadoOrdenChip(estado = orden.estado)
                    }
                }
                
                // FECHA Y PALET ACTIVO
                Column(
                    modifier = Modifier.weight(0.4f),
                    horizontalAlignment = Alignment.End
                ) {
                    orden.fechaPlan?.let { fechaPlan ->
                        Text(
                            text = formatearSoloFecha(fechaPlan),
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                    
                    android.util.Log.d("UI_PALET_HEADER", "üîç paletActivo: $paletActivo")
                    if (paletActivo == null) {
                        android.util.Log.d("UI_PALET_HEADER", "‚ùå paletActivo es null, no se muestra la X")
                    }
                    paletActivo?.let { palet ->
                        android.util.Log.d("UI_PALET_HEADER", "üîç Mostrando paletActivo: $palet")
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Text(
                                text = "üì¶ $palet",
                                style = MaterialTheme.typography.bodySmall,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            
                            // Bot√≥n X para deseleccionar palet
                            android.util.Log.d("UI_PALET_HEADER", "üîç Mostrando bot√≥n X para palet: $palet")
                            IconButton(
                                onClick = {
                                    android.util.Log.d("UI_PALET_HEADER", "üóëÔ∏è Click en X para deseleccionar palet: $palet")
                                    viewModel.deseleccionarPalet()
                                },
                                modifier = Modifier.size(20.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Close,
                                    contentDescription = "Deseleccionar palet",
                                    tint = MaterialTheme.colorScheme.error,
                                    modifier = Modifier.size(14.dp)
                                )
                            }
                        }
                        
                        // Switch para abrir/cerrar palet (dentro del header)
                        paletSeleccionado?.let { paletSeleccionado ->
                            val estaAbierto = paletSeleccionado.estado.equals("Abierto", ignoreCase = true)
                            Row(
                                modifier = Modifier.padding(top = 2.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "Estado del palet:",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                                    fontSize = 10.sp
                                )
                                Spacer(Modifier.width(4.dp))
                                Switch(
                                    checked = estaAbierto,
                                    onCheckedChange = { nuevoEstado ->
                                        android.util.Log.d("TOGGLE_PALET", "üîÑ Toggle cambiado: nuevoEstado=$nuevoEstado, estaAbierto=$estaAbierto")
                                        if (nuevoEstado && !estaAbierto) {
                                            // ABRIR palet
                                            android.util.Log.d("TOGGLE_PALET", "üîì Abriendo palet: ${paletSeleccionado.id}")
                                            onAbrirPalet(paletSeleccionado.id)
                                        } else if (!nuevoEstado && estaAbierto) {
                                            // CERRAR palet
                                            android.util.Log.d("TOGGLE_PALET", "üîí Cerrando palet: ${paletSeleccionado.id}")
                                            onCerrarPalet(paletSeleccionado.id)
                                        }
                                    },
                                    modifier = Modifier.scale(0.7f)
                                )
                                Spacer(Modifier.width(4.dp))
                                Text(
                                    text = if (estaAbierto) "Abierto" else "Cerrado",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                                    fontSize = 10.sp
                                )
                            }
                        }
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            // FILA 2: Progreso y acciones
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            
                // ESPACIO LIBRE
                Spacer(modifier = Modifier.weight(0.5f))
                
                // ACCIONES
                Column(
                    modifier = Modifier.weight(0.5f),
                    horizontalAlignment = Alignment.End
                ) {
                    android.util.Log.d("UI_PALETS", "üîç HeaderCompacto - paletsPendientes.size: ${paletsPendientes.size}")
                    if (paletsPendientes.isNotEmpty()) {
                        android.util.Log.d("UI_PALETS", "‚úÖ Mostrando bot√≥n Ver Palets")
                        Button(
                            onClick = onVerPaletsPendientes,
                            modifier = Modifier.height(32.dp),
                            contentPadding = PaddingValues(horizontal = 8.dp, vertical = 4.dp)
                        ) {
                            Text(
                                text = "Ver Palets (${paletsPendientes.size})",
                                style = MaterialTheme.typography.labelSmall
                            )
                        }
                    } else {
                        android.util.Log.d("UI_PALETS", "‚ùå No se muestra bot√≥n Ver Palets - lista vac√≠a")
                    }
                }
            }
        }
    }
}

@Composable
fun AccionPrincipal(
    orden: OrdenTraspasoDto,
    user: User,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto?,
    stockDisponible: List<StockDisponibleDto>,
    ubicacionOrigenSeleccionada: StockDisponibleDto?,
    viewModel: OrdenTraspasoViewModel,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    onLineaSeleccionada: (LineaOrdenTraspasoDetalleDto) -> Unit
) {
    when {
        // PASO 1: Seleccionar l√≠nea
        lineaSeleccionada == null -> {
            AccionSeleccionarLinea(
                orden = orden,
                user = user,
                onLineaSeleccionada = onLineaSeleccionada
            )
        }
        
        // PASO 2: Mostrar stock y permitir escaneo
        stockDisponible.isEmpty() -> {
            AccionCargandoStock()
        }
        
        // PASO 3: Escaneo y gesti√≥n de palet
        else -> {
            AccionEscaneoYPalet(
                stockDisponible = stockDisponible,
                lineaSeleccionada = lineaSeleccionada,
                ordenSeleccionada = orden,
                viewModel = viewModel,
                sessionViewModel = sessionViewModel,
                user = user
            )
        }
    }
}

@Composable
fun AccionSeleccionarLinea(
    orden: OrdenTraspasoDto,
    user: User,
    onLineaSeleccionada: (LineaOrdenTraspasoDetalleDto) -> Unit
) {
    val todasLasLineas = orden.lineas
    val lineasDelOperario = orden.lineas.filter { linea ->
        linea.idOperarioAsignado == user.id.toInt()
    }
    val lineasOperario = lineasDelOperario.filter { linea ->
        !linea.completada
    }.sortedWith(compareBy { linea ->
        when (linea.estado) {
            "EN_PROCESO" -> 1  // Primero las que ya est√°n empezadas
            "PENDIENTE" -> 2   // Luego las pendientes
            "SUBDIVIDIDO" -> 3 // Las subdivididas despu√©s
            "COMPLETADA" -> 4
            else -> 5
        }
    })
    
    // Log de debug
    android.util.Log.d("AccionSeleccionarLinea", "üìä DEBUG - Total l√≠neas en orden: ${todasLasLineas.size}")
    android.util.Log.d("AccionSeleccionarLinea", "üë§ User ID: ${user.id.toInt()}")
    android.util.Log.d("AccionSeleccionarLinea", "üìã L√≠neas del operario: ${lineasDelOperario.size}")
    android.util.Log.d("AccionSeleccionarLinea", "‚è≥ L√≠neas pendientes: ${lineasOperario.size}")
    
    lineasDelOperario.forEachIndexed { index, linea ->
        android.util.Log.d("AccionSeleccionarLinea", "üìù L√≠nea $index: ID=${linea.idLineaOrdenTraspaso}, Operario=${linea.idOperarioAsignado}, Completada=${linea.completada}, Estado=${linea.estado}")
    }
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Top
        ) {
            if (lineasOperario.isNotEmpty()) {
                // Mostrar l√≠neas directamente, sin texto grande innecesario
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    lineasOperario.forEach { linea ->
                        LineaOrdenCard(
                            linea = linea,
                            onClick = { onLineaSeleccionada(linea) }
                        )
                    }
                }
            } else {
                // Mostrar informaci√≥n de debug
                Icon(
                    if (lineasDelOperario.isEmpty()) Icons.Default.Info else Icons.Default.CheckCircle,
                    contentDescription = null,
                    modifier = Modifier.size(64.dp),
                    tint = if (lineasDelOperario.isEmpty()) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary
                )
                
                Text(
                    text = if (lineasDelOperario.isEmpty()) "SIN ART√çCULOS ASIGNADOS" else "COMPLETADO",
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center,
                    color = if (lineasDelOperario.isEmpty()) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary
                )
                
                if (lineasDelOperario.isEmpty()) {
                    Text(
                        text = "No tienes art√≠culos asignados en esta orden",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Informaci√≥n de debug
                    Card(
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Text(
                                text = "Debug Info:",
                                style = MaterialTheme.typography.labelMedium,
                                fontWeight = FontWeight.Bold
                            )
                            Text("Total l√≠neas: ${todasLasLineas.size}")
                            Text("Tu ID: ${user.id.toInt()}")
                            if (todasLasLineas.isNotEmpty()) {
                                Text("IDs de operarios en l√≠neas:")
                                todasLasLineas.take(3).forEach { linea ->
                                    Text("‚Ä¢ L√≠nea ${linea.idLineaOrdenTraspaso}: Operario ${linea.idOperarioAsignado}")
                                }
                            }
                        }
                    }
                } else {
                    Text(
                        text = "Has completado todos los art√≠culos asignados (${lineasDelOperario.count { it.completada }}/${lineasDelOperario.size})",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
    }
}

@Composable
fun AccionCargandoStock() {
    Card(
        modifier = Modifier.fillMaxSize(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                CircularProgressIndicator(modifier = Modifier.size(48.dp))
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "Consultando stock disponible...",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun AccionEscaneoYPalet(
    stockDisponible: List<StockDisponibleDto>,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto,
    ordenSeleccionada: OrdenTraspasoDto,
    viewModel: OrdenTraspasoViewModel,
    sessionViewModel: com.example.sga.view.app.SessionViewModel,
    user: User
) {
    // Reutilizar el componente existente EscaneoBasicoOrden
    EscaneoBasicoOrden(
        stockDisponible = stockDisponible,
        lineaSeleccionada = lineaSeleccionada,
        ordenSeleccionada = ordenSeleccionada,
        viewModel = viewModel,
        sessionViewModel = sessionViewModel,
        user = user
    )
}

@Composable
fun InformacionApoyo(
    modifier: Modifier = Modifier,
    lineaSeleccionada: LineaOrdenTraspasoDetalleDto?,
    stockDisponible: List<StockDisponibleDto>,
    paletSeleccionado: com.example.sga.data.dto.traspasos.PaletDto?,
    user: User?,
    viewModel: OrdenTraspasoViewModel
) {
    var expandido by remember { mutableStateOf(false) }
    
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
    ) {
        Column(
            modifier = Modifier.padding(12.dp)
        ) {
            // Header plegable
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { expandido = !expandido },
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Informaci√≥n detallada",
                    style = MaterialTheme.typography.labelMedium,
                    fontWeight = FontWeight.Bold
                )
                Icon(
                    if (expandido) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                    contentDescription = null
                )
            }
            
            // Contenido expandible
            if (expandido) {
                Spacer(modifier = Modifier.height(8.dp))
                
                // Mostrar informaci√≥n contextual con explicaciones (con scroll)
                LazyColumn(
                    modifier = Modifier.heightIn(max = 400.dp),
                    verticalArrangement = Arrangement.spacedBy(6.dp)
                ) {
                    // 1. L√≠nea de trabajo actual (PRIMERO)
                    lineaSeleccionada?.let { linea ->
                        item {
                            Text(
                                text = "ART√çCULO SELECCIONADO:",
                                style = MaterialTheme.typography.labelSmall,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }
                        item {
                            Text(
                                text = "Art√≠culo: ${linea.codigoArticulo} - ${linea.descripcionArticulo ?: "Sin descripci√≥n"}",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                        item {
                            Text(
                                text = "Cantidad a recoger: ${linea.cantidadPlan}",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }
                    
                    // 2. Ubicaci√≥n de origen (donde buscar) (SEGUNDO)
                    if (stockDisponible.isNotEmpty()) {
                        val stock = stockDisponible.first()
                        item {
                            Text(
                                text = "UBICACI√ìN DEL ART√çCULO:",
                                style = MaterialTheme.typography.labelSmall,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }
                        item {
                            Text(
                                text = "Almac√©n: ${stock.codigoAlmacen}",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                        item {
                            Text(
                                text = "Ubicaci√≥n: ${stock.ubicacion}",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                        item {
                            Text(
                                text = "Stock disponible: ${stock.cantidadDisponible}",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }
                    
                    // 3. Art√≠culos en el palet (TERCERO)
                    paletSeleccionado?.let { palet ->
                        // Mostrar solo las l√≠neas del palet
                        item {
                            LineasPaletInfo(
                                palet = palet,
                                user = user,
                                viewModel = viewModel
                            )
                        }
                    }
                }
            }
        }
    }
}

// Funci√≥n auxiliar para manejar escaneo de ubicaci√≥n destino
private fun manejarEscaneoDestino(
    code: String,
    empresa: Short,
    traspasosLogic: TraspasosLogic,
    onUbicacionDestino: (String, String) -> Unit,
    onError: (String) -> Unit
) {
    traspasosLogic.procesarCodigoEscaneado(
        code = code,
        empresaId = empresa,
        onUbicacionDetectada = { almacenDestino, ubicacionDestino ->
            onUbicacionDestino(almacenDestino, ubicacionDestino)
        },
        onArticuloDetectado = { _ ->
            onError("Ha escaneado un art√≠culo. Debe escanear una ubicaci√≥n destino.")
        },
        onMultipleArticulos = { _ ->
            onError("Ha escaneado un art√≠culo. Debe escanear una ubicaci√≥n destino.")
        },
        onPaletDetectado = { _ ->
            onError("Ha escaneado un palet. Debe escanear una ubicaci√≥n destino.")
        },
        onError = onError
    )
}

@Composable
fun LineasPaletInfo(
    palet: com.example.sga.data.dto.traspasos.PaletDto,
    user: User?,
    viewModel: OrdenTraspasoViewModel
) {
    val lineasPalet by viewModel.lineasPalet.collectAsStateWithLifecycle()
    val lineasDelPalet = lineasPalet[palet.id] ?: emptyList()
    
    if (lineasDelPalet.isNotEmpty()) {
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = "ART√çCULOS EN EL PALET:",
            style = MaterialTheme.typography.labelSmall,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary
        )
        
        lineasDelPalet.forEach { lineaPalet ->
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "‚Ä¢ ${lineaPalet.codigoArticulo}",
                        style = MaterialTheme.typography.bodySmall
                    )
                    Text(
                        text = "  ${lineaPalet.cantidad} uds",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                // Bot√≥n para eliminar l√≠nea
                TextButton(
                    onClick = {
                        user?.let { u ->
                            viewModel.eliminarLineaPalet(
                                idLinea = lineaPalet.id,
                                usuarioId = u.id.toInt(),
                                paletId = palet.id
                            )
                        }
                    },
                    modifier = Modifier.size(24.dp),
                    contentPadding = PaddingValues(0.dp)
                ) {
                    Text(
                        text = "‚úï",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.error
                    )
                }
            }
        }
    } else {
        Text(
            text = "Palet vac√≠o",
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

// DI√ÅLOGO DE ERROR CREAR MATERIA - Manejo espec√≠fico para errores de stock
@Composable
fun DialogoErrorCrearMateria(
    mostrar: Boolean,
    detalles: String?,
    onDismiss: () -> Unit
) {
    if (mostrar && detalles != null) {
        AlertDialog(
            onDismissRequest = { /* No permitir cerrar con gestos */ },
            text = {
                Text(
                    text = detalles,
                    style = MaterialTheme.typography.bodyMedium,
                    lineHeight = 20.sp
                )
            },
            confirmButton = {
                TextButton(
                    onClick = onDismiss,
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = MaterialTheme.colorScheme.error
                    )
                ) {
                    Text("Entendido")
                }
            }
        )
    }
}

// DI√ÅLOGO DE ADVERTENCIA DE CANTIDAD - Validaci√≥n previa opcional
@Composable
fun DialogoAdvertenciaCantidad(
    mostrar: Boolean,
    mensaje: String?,
    onConfirmar: () -> Unit,
    onCancelar: () -> Unit
) {
    if (mostrar && mensaje != null) {
        AlertDialog(
            onDismissRequest = { /* No permitir cerrar con gestos */ },
            title = { 
                Text(
                    text = "‚ö†Ô∏è Advertencia de cantidad",
                    style = MaterialTheme.typography.headlineSmall,
                    color = MaterialTheme.colorScheme.tertiary
                )
            },
            text = {
                Text(
                    text = mensaje,
                    style = MaterialTheme.typography.bodyMedium
                )
            },
            confirmButton = {
                TextButton(
                    onClick = onConfirmar,
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = MaterialTheme.colorScheme.primary
                    )
                ) {
                    Text("Continuar")
                }
            },
            dismissButton = {
                TextButton(
                    onClick = onCancelar,
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                ) {
                    Text("Cancelar")
                }
            }
        )
    }
}

