package com.example.sga.view.stock

import android.content.Context
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.compose.ui.text.TextRange
import androidx.compose.ui.text.input.TextFieldValue
import com.example.sga.data.ApiManager
import com.example.sga.data.dto.stock.ArticuloDto
import com.example.sga.data.dto.stock.StockDto
import com.example.sga.data.mapper.StockMapper
import com.example.sga.utils.SoundUtils
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.time.LocalDate

class StockLogic(
    private val stockViewModel: StockViewModel,
    private val context: Context
) {

    private fun String?.clean(): String? =
        this?.trim()?.uppercase()?.takeIf { it.isNotEmpty() }

    fun consultarStock(
        codigoEmpresa : Short,
        codigoUbicacion: String? = null,
        codigoAlmacen : String? = null,
        codigoArticulo: String? = null,
        codigoCentro  : String? = null,
        almacen       : String? = null,
        partida       : String? = null,
        onFinally     : (() -> Unit)? = null,   // limpieza UI (campo y foco)
    ) {
        stockViewModel.setCargando(true)

        fun finish() {
            // Ejecuta SIEMPRE en Main: modifica estados Compose sin riesgos
            Handler(Looper.getMainLooper()).post {
                stockViewModel.setCargando(false)
                try { onFinally?.invoke() } catch (_: Exception) {}
            }
        }

        // üîç LOG DE DEBUG - Par√°metros enviados al backend
        Log.d("STOCK_PARAMS", """
            üì° Par√°metros enviados al endpoint Stock/consulta-stock:
            üè¢ codigoEmpresa: $codigoEmpresa
            üì¶ codigoArticulo: ${codigoArticulo.clean()}
            üìç codigoUbicacion: ${codigoUbicacion.clean()}
            üè¨ codigoAlmacen: ${codigoAlmacen.clean()}
            üéØ codigoCentro: ${codigoCentro.clean()}
            üè≠ almacen: ${almacen.clean()}
            üìã partida: ${partida.clean()}
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        """.trimIndent())

        ApiManager.stockApi.consultarStock(
            codigoEmpresa   = codigoEmpresa,
            codigoUbicacion = codigoUbicacion.clean(),
            codigoAlmacen   = codigoAlmacen.clean(),
            codigoArticulo  = codigoArticulo.clean(),
            codigoCentro    = codigoCentro.clean(),
            almacen         = almacen.clean(),
            partida         = partida.clean()
        ).enqueue(object : Callback<List<StockDto>> {
            override fun onResponse(
                call: Call<List<StockDto>>,
                response: Response<List<StockDto>>
            ) {
                if (!response.isSuccessful) {
                    val msg = response.errorBody()?.string() ?: "Error desconocido"
                    stockViewModel.setError("Error ${response.code()}: $msg")
                    // üîä Sonido de error
                    SoundUtils.getInstance().playErrorSound()
                    finish(); return
                }

                val listaInicial = response.body().orEmpty()

                // üîç LOGS DE DEBUG - Stock recibido del backend
                Log.d("STOCK_CONSULTA", """
                    üì° Respuesta del backend:
                    üéØ Total registros: ${listaInicial.size}
                    üì¶ Almacenes encontrados: ${listaInicial.map { it.codigoAlmacen }.distinct()}
                    
                    üìã DETALLE DE STOCK:
                    ${listaInicial.take(5).joinToString("\n") { stock ->
                        "  ‚Ä¢ Art: ${stock.codigoArticulo} | Alm: ${stock.codigoAlmacen} | Disp: ${stock.disponible} | Ubi: ${stock.ubicacion}"
                    }}${if (listaInicial.size > 5) "\n  ... y ${listaInicial.size - 5} m√°s" else ""}
                    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                """.trimIndent())

                if (listaInicial.isNotEmpty()) {
                    // Obtener descripciones para cada art√≠culo individualmente
                    obtenerDescripcionesArticulos(
                        listaStock = listaInicial,
                        codigoEmpresa = codigoEmpresa.toShort(),
                        codigoAlmacen = codigoAlmacen.clean(),
                        codigoCentro = codigoCentro.clean(),
                        almacen = almacen.clean(),
                        partida = partida.clean(),
                        onSuccess = { listaConDescripciones ->
                            stockViewModel.setResultado(listaConDescripciones)
                            stockViewModel.setError(null)
                            // üîä Sonido de √©xito
                            SoundUtils.getInstance().playSuccessSound()
                            finish()
                        },
                        onError = { errorMsg ->
                            // Si falla la obtenci√≥n de descripciones, mostrar stock sin descripciones
                            val listaSinDesc = listaInicial.map { StockMapper.fromDto(it) }
                            stockViewModel.setResultado(listaSinDesc)
                            stockViewModel.setError("Stock obtenido pero descripciones no disponibles: $errorMsg")
                            // üîä Sonido de √©xito (parcial) - tenemos stock aunque sin descripciones
                            SoundUtils.getInstance().playSuccessSound()
                            finish()
                        }
                    )
                } else {
                    stockViewModel.setResultado(emptyList())
                    stockViewModel.setError("No se encontraron datos de stock.")
                    // üîä Sonido de error - no hay stock
                    SoundUtils.getInstance().playErrorSound()
                    finish()
                }
            }

            override fun onFailure(call: Call<List<StockDto>>, t: Throwable) {
                stockViewModel.setError("Error de conexi√≥n: ${t.localizedMessage}")
                // üîä Sonido de error - fallo de conexi√≥n
                SoundUtils.getInstance().playErrorSound()
                finish()
            }
        })
    }

    private fun obtenerDescripcionesArticulos(
        listaStock: List<StockDto>,
        codigoEmpresa: Short,
        codigoAlmacen: String?,
        codigoCentro: String?,
        almacen: String?,
        partida: String?,
        onSuccess: (List<com.example.sga.data.model.stock.Stock>) -> Unit,
        onError: (String) -> Unit
    ) {
        val articulosUnicos = listaStock.map { it.codigoArticulo }.distinct()
        val descripcionesMap = mutableMapOf<String, String>()
        
        if (articulosUnicos.isEmpty()) {
            onSuccess(listaStock.map { StockMapper.fromDto(it) })
            return
        }

        // Funci√≥n recursiva para procesar art√≠culos secuencialmente
        fun procesarArticulo(index: Int) {
            if (index >= articulosUnicos.size) {
                // Todos los art√≠culos procesados, mapear resultados
                val listaConDescripciones = listaStock.map { stockDto ->
                    val descripcion = descripcionesMap[stockDto.codigoArticulo] ?: "Sin descripci√≥n"
                    StockMapper.fromDto(stockDto.copy(descripcionArticulo = descripcion))
                }
                onSuccess(listaConDescripciones)
                return
            }

            val codigoArticulo = articulosUnicos[index]
            
            ApiManager.stockApi.buscarArticulo(
                codigoEmpresa = codigoEmpresa,
                codigoArticulo = codigoArticulo,
                codigoAlmacen = codigoAlmacen,
                codigoCentro = codigoCentro,
                almacen = almacen,
                partida = partida
            ).enqueue(object : Callback<List<ArticuloDto>> {
                override fun onResponse(
                    call: Call<List<ArticuloDto>>,
                    response: Response<List<ArticuloDto>>
                ) {
                    val descripcion = if (response.isSuccessful) {
                        response.body()?.firstOrNull()?.descripcion ?: "Sin descripci√≥n"
                    } else {
                        "Sin descripci√≥n"
                    }
                    descripcionesMap[codigoArticulo] = descripcion
                    
                    // Procesar el siguiente art√≠culo
                    procesarArticulo(index + 1)
                }

                override fun onFailure(call: Call<List<ArticuloDto>>, t: Throwable) {
                    // En caso de error, usar descripci√≥n por defecto y continuar
                    descripcionesMap[codigoArticulo] = "Sin descripci√≥n"
                    Log.w("STOCK_DESC", "Error obteniendo descripci√≥n para $codigoArticulo: ${t.message}")
                    
                    // Procesar el siguiente art√≠culo
                    procesarArticulo(index + 1)
                }
            })
        }

        // Iniciar el procesamiento secuencial
        procesarArticulo(0)
    }

    fun buscarArticuloPorEAN(
        codigoEmpresa : Short,
        ean13         : String,
        codigoAlmacen : String? = null,
        codigoCentro  : String? = null,
        almacen       : String? = null,
        partida       : String? = null,
        onUnico       : (String) -> Unit,
        onMultiple    : (List<ArticuloDto>) -> Unit,
        onError       : (String)  -> Unit
    ) {
        ApiManager.stockApi.buscarArticulo(
            codigoEmpresa    = codigoEmpresa,
            codigoAlternativo = ean13,
            codigoAlmacen    = codigoAlmacen,
            codigoCentro     = codigoCentro,
            almacen          = almacen,
            partida          = partida
        ).enqueue(object : Callback<List<ArticuloDto>> {
            override fun onResponse(
                call: Call<List<ArticuloDto>>,
                response: Response<List<ArticuloDto>>
            ) {
                Log.d("BUSQUEDA_ARTICULO", "üì° HTTP ${response.code()}")

                if (response.isSuccessful) {
                    val lista = response.body().orEmpty()
                    Log.d("BUSQUEDA_ARTICULO", "‚úÖ Art√≠culos encontrados (sin filtrar): ${lista.size}")
                    lista.forEach {
                        Log.d("BUSQUEDA_ARTICULO", "   ‚Üí ${it.codigoArticulo} - ${it.descripcion}")
                    }

                    // üîç Filtrado manual por partida (normalizado sin guiones ni espacios)
                    val listaFiltrada = partida?.let { p ->
                        val pNorm = p.filter { it.isDigit() }  // ‚Äú54-2403701‚Äù ‚Üí ‚Äú542403701‚Äù
                        lista.filter { art ->
                            art.partida?.filter { it.isDigit() } == pNorm
                        }
                    } ?: lista

                    //val candidatos = if (listaFiltrada.isNotEmpty()) listaFiltrada else lista
                    val candidatos = (if (listaFiltrada.isNotEmpty()) listaFiltrada else lista)
                        .distinctBy { "${it.codigoArticulo}-${it.descripcion}-${it.partida}" }
                    Log.d("BUSQUEDA_ARTICULO", "üéØ Candidatos tras filtro: ${candidatos.size}")

                    when (candidatos.size) {
                        0 -> {
                            Log.w("BUSQUEDA_ARTICULO", "‚ö†Ô∏è Sin art√≠culos para ese EAN")
                            onError("No se encontr√≥ ning√∫n art√≠culo con ese c√≥digo.")
                        }
                        1 -> onUnico(candidatos.first().codigoArticulo)
                        else -> onMultiple(candidatos)
                    }
                } else {
                    val errorBody = response.errorBody()?.string()
                    Log.e("BUSQUEDA_ARTICULO", "‚ùå Error HTTP ${response.code()}: $errorBody")
                    onError("Error ${response.code()}: $errorBody")
                }
            }

            override fun onFailure(call: Call<List<ArticuloDto>>, t: Throwable) {
                Log.e("BUSQUEDA_ARTICULO", "üí• Fallo de red: ${t.message}")
                onError("Error al buscar art√≠culo: ${t.message}")
            }
        })
    }

    fun buscarArticuloPorDescripcion(
        codigoEmpresa: Short,
        descripcion: String,
        codigoAlmacen: String? = null,
        codigoCentro:  String? = null,
        almacen:       String? = null,
        partida:       String? = null,
        onUnico:      (String) -> Unit,
        onMultiple:   (List<ArticuloDto>) -> Unit,
        onError:      (String) -> Unit
    ) {
        ApiManager.stockApi.buscarArticulo(
            codigoEmpresa  = codigoEmpresa,
            descripcion    = descripcion,
            codigoAlmacen  = codigoAlmacen,
            codigoCentro   = codigoCentro,
            almacen        = almacen,
            partida        = partida
        ).enqueue(object : Callback<List<ArticuloDto>> {
            override fun onResponse(
                call: Call<List<ArticuloDto>>,
                response: Response<List<ArticuloDto>>
            ) {
                val lista = response.body().orEmpty()
                when (lista.size) {
                    0    -> onError("No se encontraron art√≠culos con esa descripci√≥n.")
                    1    -> onUnico(lista.first().codigoArticulo)
                    else -> onMultiple(lista)
                }
            }

            override fun onFailure(call: Call<List<ArticuloDto>>, t: Throwable) {
                onError("Error al buscar art√≠culos: ${t.message}")
            }
        })
    }

/*fun procesarCodigoEscaneado(
    code: String,
    almacenSel: String?,
    empresaId: Short,
    onCodigoArticuloDetectado: (TextFieldValue) -> Unit,
    onUbicacionDetectada: (TextFieldValue) -> Unit,
    onError: (String) -> Unit,
    lanzarConsulta: () -> Unit,
    onMultipleArticulos: (List<ArticuloDto>) -> Unit
) {
    Log.d("ESCANEO", "üì∑ C√≥digo recibido: $code")
    val trimmed = code.trim()

    // ‚Äî‚Äî‚Äî 1) C√≥digo EAN13 ‚Äî‚Äî‚Äî
    if (trimmed.startsWith("010") && trimmed.length >= 20) {
        val ean13 = trimmed.substring(3, 16)
        Log.d("ESCANEO", "üì¶ EAN extra√≠do: $ean13")

        val ai15Index = trimmed.indexOf("15", startIndex = 16)
        val ai10Index = trimmed.indexOf("10", startIndex = 16)

        val fechaCaducidad = if (ai15Index != -1 && ai15Index + 8 <= trimmed.length) {
            val fechaStr = trimmed.substring(ai15Index + 2, ai15Index + 8)
            try {
                LocalDate.parse("20${fechaStr.substring(0, 2)}-${fechaStr.substring(2, 4)}-${fechaStr.substring(4, 6)}")
            } catch (_: Exception) { null }
        } else null

        val partida = if (ai10Index != -1 && ai10Index + 2 < trimmed.length) {
            trimmed.substring(ai10Index + 2)
        } else null

        Log.d("ESCANEO", "üìÖ Fecha caducidad: $fechaCaducidad")
        Log.d("ESCANEO", "üîñ Partida: $partida")

        buscarArticuloPorEAN(
            codigoEmpresa = empresaId,
            ean13 = ean13,
            codigoAlmacen = almacenSel.takeIf { it != "Todos" },
            partida = partida,
            onUnico = {
                onCodigoArticuloDetectado(TextFieldValue(it))
                lanzarConsulta()
            },
            onMultiple = onMultipleArticulos,
            onError = { onError("‚ùå $it") }
        )
        return
    }
    // ‚Äî‚Äî‚Äî 2) Ubicaci√≥n con $ (p.ej. "PR$UB001013003004" o "213$UB001013003004") ‚Äî‚Äî‚Äî
    if (trimmed.contains('$')) {
        val parts = trimmed.split('$', limit = 2)
        val (almacenEscaneado, ubicacionEscaneada) = when {
            parts.size == 2 && parts[0].isNotBlank() -> parts[0] to parts[1]   // acepta PR, ALM01, 213, etc.
            parts.size == 2 -> null to parts[1]
            else -> null to trimmed.removePrefix("$")
        }

        Log.d("ESCANEO", "üìç Ubicaci√≥n escaneada: $ubicacionEscaneada")
        almacenEscaneado?.let { Log.d("ESCANEO", "üè∑Ô∏è Almac√©n escaneado: $it") }

        // Mantenemos el contrato: pasamos lo escaneado tal cual para que la UI lo procese
        onUbicacionDetectada(TextFieldValue(trimmed))
        lanzarConsulta()
        return
    }

    // ‚Äî‚Äî‚Äî ) Para el resto de casos, exigir almac√©n seleccionado ‚Äî‚Äî‚Äî
    // Validar almac√©n solo si vamos a buscar por ubicaci√≥n
    val esArticulo = trimmed.length in 4..25 && trimmed.all { it.isLetterOrDigit() }
    if (!esArticulo && (almacenSel.isNullOrBlank() || almacenSel == "Todos")) {
        onError("‚ö†Ô∏è Selecciona un almac√©n para consultar por ubicaci√≥n.")
        return
    }

    // ‚Äî‚Äî‚Äî 3) C√≥digo art√≠culo directo ‚Äî‚Äî‚Äî
    if (trimmed.length in 4..25 && trimmed.all { it.isLetterOrDigit() }) {
        Log.d("ESCANEO", "üîç Posible c√≥digo de art√≠culo: $trimmed")

        ApiManager.stockApi.buscarArticulo(
            codigoEmpresa = empresaId,
            codigoArticulo = trimmed,
            codigoAlmacen = almacenSel.takeIf { it != "Todos" }
        ).enqueue(object : Callback<List<ArticuloDto>> {
            override fun onResponse(call: Call<List<ArticuloDto>>, response: Response<List<ArticuloDto>>) {
                val lista = response.body().orEmpty()

                when (lista.size) {
                    0 -> onError("No se encontr√≥ ning√∫n art√≠culo con ese c√≥digo.")
                    1 -> {
                        onCodigoArticuloDetectado(TextFieldValue(lista.first().codigoArticulo))
                        lanzarConsulta()
                    }
                    else -> onMultipleArticulos(lista)
                }
            }

            override fun onFailure(call: Call<List<ArticuloDto>>, t: Throwable) {
                onError("Error de red: ${t.message}")
            }
        })
    } else {
        onError("‚ùå C√≥digo no v√°lido o formato no reconocido.")
    }
}*/
fun procesarCodigoEscaneado(
    code: String,
    almacenSel: String?,
    empresaId: Short,
    onCodigoArticuloDetectado: (TextFieldValue) -> Unit,
    onUbicacionDetectada: (TextFieldValue) -> Unit,
    onError: (String) -> Unit,
    lanzarConsulta: () -> Unit,
    onMultipleArticulos: (List<ArticuloDto>) -> Unit
) {
    Log.d("ESCANEO", "üì∑ C√≥digo recibido: $code")
    val trimmed = code.trim()
    if (trimmed.isEmpty()) {
        onError("‚ùå C√≥digo vac√≠o.")
        return
    }

    // ‚Äî‚Äî‚Äî 1) GS1 con EAN13 (AI 01) + opcionales AI 15/10 ‚Äî‚Äî‚Äî
    if (trimmed.startsWith("010") && trimmed.length >= 20) {
        val ean13 = trimmed.substring(3, 16)
        Log.d("ESCANEO", "üì¶ EAN extra√≠do: $ean13")

        val ai15Index = trimmed.indexOf("15", startIndex = 16)
        val ai10Index = trimmed.indexOf("10", startIndex = 16)

        val fechaCaducidad = if (ai15Index != -1 && ai15Index + 8 <= trimmed.length) {
            val fechaStr = trimmed.substring(ai15Index + 2, ai15Index + 8)
            try {
                LocalDate.parse("20${fechaStr.substring(0, 2)}-${fechaStr.substring(2, 4)}-${fechaStr.substring(4, 6)}")
            } catch (_: Exception) { null }
        } else null

        val partida = if (ai10Index != -1 && ai10Index + 2 < trimmed.length) {
            trimmed.substring(ai10Index + 2)
        } else null

        Log.d("ESCANEO", "üìÖ Fecha caducidad: $fechaCaducidad")
        Log.d("ESCANEO", "üîñ Partida: $partida")

        buscarArticuloPorEAN(
            codigoEmpresa = empresaId,
            ean13 = ean13,
            codigoAlmacen = almacenSel.takeIf { it != "Todos" },
            partida = partida,
            onUnico = { cod ->
                // SUSTITUYE el campo art√≠culo (no concatenar) y deja el cursor al final
                onCodigoArticuloDetectado(
                    TextFieldValue(text = cod, selection = TextRange(cod.length))
                )
                lanzarConsulta()
            },
            onMultiple = onMultipleArticulos,
            onError = { onError("‚ùå $it") }
        )
        return
    }

/*    // ‚Äî‚Äî‚Äî 2) Ubicaci√≥n con $ (p.ej. "PR$UB001013003004" o "$UB001...") ‚Äî‚Äî‚Äî
    if (trimmed.contains('$')) {
        // Antes de tocar ubicaci√≥n, VACIAMOS el art√≠culo para evitar acumulaciones/foco pegado
        onCodigoArticuloDetectado(TextFieldValue(""))

        // Enviamos tal cual para que la UI lo procese (mantengo tu contrato actual)
        onUbicacionDetectada(TextFieldValue(text = trimmed, selection = TextRange(trimmed.length)))
        lanzarConsulta()
        return
    }*/
    // ‚Äî‚Äî‚Äî 2) Ubicaci√≥n con $ (ALM$UB‚Ä¶, ALM$, o $UB‚Ä¶) ‚Äî‚Äî‚Äî
    if (trimmed.contains('$')) {
        // Antes de tocar ubicaci√≥n, VACIAMOS el art√≠culo para evitar acumulaciones/foco pegado
        onCodigoArticuloDetectado(TextFieldValue(""))

        val almUbRegex   = Regex("""^([^$]+)\$([^$]+)$""") // ALM$UB‚Ä¶  (incluye ALM$suelo)
        val soloAlmRegex = Regex("""^([^$]+)\$$""")        // ALM$     (sin ubicar ‚Üí ubi = "")
        val soloUbRegex  = Regex("""^\$([^$]+)$""")        // $UB‚Ä¶

        // ‚úÖ Caso normal: "ALM$UB..." o "ALM$suelo"
        if (almUbRegex.matchEntire(trimmed) != null) {
            onUbicacionDetectada(TextFieldValue(text = trimmed, selection = TextRange(trimmed.length)))
            lanzarConsulta()
            return
        }

        // ‚úÖ Caso "ALM$" ‚Üí ubicaci√≥n SIN UBICAR (cadena vac√≠a) ‚áí CONSULTAR
        if (soloAlmRegex.matchEntire(trimmed) != null) {
            onUbicacionDetectada(TextFieldValue(text = trimmed, selection = TextRange(trimmed.length)))
            lanzarConsulta()
            return
        }

        // ‚ö†Ô∏è Caso "$UB..." ‚Üí comp√≥n con almac√©n seleccionado si existe; si no, avisar
        if (soloUbRegex.matchEntire(trimmed) != null) {
            val ub = soloUbRegex.matchEntire(trimmed)!!.groupValues[1].trim()
            val almSelVal = almacenSel?.takeIf { it.isNotBlank() && it != "Todos" }
            if (almSelVal == null) {
                onError("Selecciona un almac√©n o escanea en formato 'ALM\$UB...'.")
                return
            }
            val compuesto = "$almSelVal$$ub"
            onUbicacionDetectada(TextFieldValue(text = compuesto, selection = TextRange(compuesto.length)))
            lanzarConsulta()
            return
        }

        // üü• Cualquier otro patr√≥n raro con '$'
        onError("‚ùå Formato de ubicaci√≥n no v√°lido.")
        return
    }

    // ‚Äî‚Äî‚Äî 3) Ubicaci√≥n simple "UB..." (requiere almac√©n seleccionado distinto de "Todos") ‚Äî‚Äî‚Äî
    val esUbicacionSimple = trimmed.startsWith("UB", ignoreCase = true) && trimmed.length >= 6
    if (esUbicacionSimple) {
        if (almacenSel.isNullOrBlank() || almacenSel == "Todos") {
            onError("‚ö†Ô∏è Selecciona un almac√©n para consultar por ubicaci√≥n.")
            return
        }
        // Limpiamos el art√≠culo y construimos el formato ALM$UB... para mantener homogeneidad
        onCodigoArticuloDetectado(TextFieldValue(""))
        val compuesto = "$almacenSel$$trimmed"
        onUbicacionDetectada(TextFieldValue(text = compuesto, selection = TextRange(compuesto.length)))
        lanzarConsulta()
        return
    }

    // ‚Äî‚Äî‚Äî 4) C√≥digo art√≠culo directo ‚Äî‚Äî‚Äî
    val esArticulo = trimmed.length in 4..25 && trimmed.all { it.isLetterOrDigit() }
    if (esArticulo) {
        Log.d("ESCANEO", "üîç Posible c√≥digo de art√≠culo: $trimmed")

        ApiManager.stockApi.buscarArticulo(
            codigoEmpresa = empresaId,
            codigoArticulo = trimmed,
            codigoAlmacen = almacenSel.takeIf { it != "Todos" }
        ).enqueue(object : Callback<List<ArticuloDto>> {
            override fun onResponse(
                call: Call<List<ArticuloDto>>,
                response: Response<List<ArticuloDto>>
            ) {
                val lista = response.body().orEmpty()
                when (lista.size) {
                    0 -> onError("No se encontr√≥ ning√∫n art√≠culo con ese c√≥digo.")
                    1 -> {
                        val cod = lista.first().codigoArticulo
                        onCodigoArticuloDetectado(TextFieldValue(text = cod, selection = TextRange(cod.length)))
                        lanzarConsulta()
                    }
                    else -> onMultipleArticulos(lista)
                }
            }

            override fun onFailure(call: Call<List<ArticuloDto>>, t: Throwable) {
                onError("Error de red: ${t.message}")
            }
        })
        return
    }

    // ‚Äî‚Äî‚Äî 5) Formato no reconocido ‚Äî‚Äî‚Äî
    onError("‚ùå C√≥digo no v√°lido o formato no reconocido.")
}

}

